{
  "address": "0xf18ac35e50e8eb952E6BC657859B2f7B9FA83F96",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "contract TokenFactory",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "contract CoreFactory",
          "name": "_coreFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "coreFactory",
      "outputs": [
        {
          "internalType": "contract CoreFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenFactory.TokenConfig",
          "name": "_tokenConfig",
          "type": "tuple"
        },
        {
          "internalType": "uint256[3]",
          "name": "_votingSettings",
          "type": "uint256[3]"
        }
      ],
      "name": "newDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "contract TokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd958425af9698f8a864f2953b897292ff0feef9953ab6332cf09c093b4829c7",
  "receipt": {
    "to": null,
    "from": "0x94C34FB5025e054B24398220CBDaBE901bd8eE5e",
    "contractAddress": "0xf18ac35e50e8eb952E6BC657859B2f7B9FA83F96",
    "transactionIndex": 18,
    "gasUsed": "11044821",
    "logsBloom": "0x
    "blockHash": "0xa484d00a6f1c39600f13fc3e2e5da3e0590eeee22c3c223972224b6ed07183a6",
    "transactionHash": "0xbd958425af9698f8a864f2953b897292ff0feef9953ab6332cf09c093b4829c7",
    "logs": [],
    "blockNumber": 9807922,
    "cumulativeGasUsed": "14544905",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x99AA93f7c882937849dDf31BBeCF8Bc1c7CF3192",
    "0xa9fC75feC2171160e64DBfF195A82460bcf22779",
    "0x2575C6C8C515b86af775F1D33A8E0BA562A84f06"
  ],
  "solcInputHash": "effbbd7e948d8c3899cd75bca837788f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"contract TokenFactory\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"contract CoreFactory\",\"name\":\"_coreFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"coreFactory\",\"outputs\":[{\"internalType\":\"contract CoreFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenFactory.TokenConfig\",\"name\":\"_tokenConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint256[3]\",\"name\":\"_votingSettings\",\"type\":\"uint256[3]\"}],\"name\":\"newDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract TokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/factories/DAOFactory.sol\":\"DAOFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x046a0ed44997d20c6fac6fb186cb2ce8957a1b25497f713bc18c79db21e57dee\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x47852df4456c4b7e2fbda473b1c237f24991d2ceb1c7cba8d90e229bf6add473\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../../utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20VotesUpgradeable is Initializable, ERC20PermitUpgradeable {\\n    function __ERC20Votes_init_unchained() internal initializer {\\n    }\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSAUpgradeable.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCastUpgradeable.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCastUpgradeable.toUint32(block.number), votes: SafeCastUpgradeable.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x0a74581ffd6b8adfe095337e561f752d2e7e2cfdd518b203111123c0b7bb8cf4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20WrapperUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Wrapper.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of the ERC20 token contract to support token wrapping.\\n *\\n * Users can deposit and withdraw \\\"underlying tokens\\\" and receive a matching number of \\\"wrapped tokens\\\". This is useful\\n * in conjunction with other modules. For example, combining this wrapping mechanism with {ERC20Votes} will allow the\\n * wrapping of an existing \\\"basic\\\" ERC20 into a governance token.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20WrapperUpgradeable is Initializable, ERC20Upgradeable {\\n    IERC20Upgradeable public underlying;\\n\\n    function __ERC20Wrapper_init(IERC20Upgradeable underlyingToken) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Wrapper_init_unchained(underlyingToken);\\n    }\\n\\n    function __ERC20Wrapper_init_unchained(IERC20Upgradeable underlyingToken) internal initializer {\\n        underlying = underlyingToken;\\n    }\\n\\n    /**\\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens.\\n     */\\n    function depositFor(address account, uint256 amount) public virtual returns (bool) {\\n        SafeERC20Upgradeable.safeTransferFrom(underlying, _msgSender(), address(this), amount);\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens.\\n     */\\n    function withdrawTo(address account, uint256 amount) public virtual returns (bool) {\\n        _burn(_msgSender(), amount);\\n        SafeERC20Upgradeable.safeTransfer(underlying, account, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mint wrapped token to cover any underlyingTokens that would have been transfered by mistake. Internal\\n     * function that can be exposed with access control if desired.\\n     */\\n    function _recover(address account) internal virtual returns (uint256) {\\n        uint256 value = underlying.balanceOf(address(this)) - totalSupply();\\n        _mint(account, value);\\n        return value;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x95263e6897a6a19978dfd4cdb9906c735868b2390d8f4ce1650cdcd56d38cbfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0c85e40b29481eadb132cb5eb973d27b4567098f4bc257b250ee540d8d309a00\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa55d6efdfd8ba20c827041c54d38880020b41984c25bf1f39a27d185841ec283\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc815dccf75f18fe4df62a7ab38f35398792b38ac66d90325373dd5067c9453b0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x704add6904e5156bac4fb870ee851af4c2d004ae0cac22fd030162843fd1d611\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x17698d23fc4bd8420ec3077f7e621d035d3d73757a709ac12873a34dd4323c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0287c745fdf617370bf5dcfe28372b3bde631dc3ab1ce8e8b25a359ba0c91fb2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xb5f53cc3ab24ab6fa25438eb8f5d7eb1c3ba12ee0766e7f8f3b73d6a94d22131\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x735485d9746aca75100c15f46e7933e42a7d25494c5844b723116a3e105f7569\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xb0ff3f5c37c94cfa0da555a4c7d9034c46d70d0479917bed63612a9fc7092672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xea40bf10119e88ed92ff8f1c72d01b0d2bfc810ad32c87d63ab6f316595d2c91\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd0d01e9036a03e50a71009749b9bfe7570a8f5b852ea409f794debfdd646dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xdfddefa47c1f11dde2c3b5533c76ccef27a526985c74d9c917deb699d5d46a56\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x94f08740b99a0997bc8363edb752b38354f730a38c54eb7bdd38a8a22ff34aae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xe237a2794a6588efdbf8cf998283ad188ac0e32d5f3e1d7d8d286fdac82863bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0xc316e5760b3ddcb8a43d652069d39ebfa8b036ff74aae35e44fd8db2d1d53b87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xfe718c5c09fded4739cb9aaebc881b91e69e39d9ce2bf77e8ebb43425cbf0582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe7713f1b362f8b80e28d5a7e8b66c3f2236203fd86d01eca0a29a9e6a3f4d97f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x74f630d2664c1581a1cbd0730d4ba119b3a184ef90c65f3a934be4d16d0e58a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d874c66c21369dce8d3fe0b6c41316b0c289e45c0b4a77090c010ac2bb80e61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x594efd2fa154f4fbe0fa92c2356cb2a9531ef3902e35784c2bc69764d0d8886a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xd4d500f24f5ea0a9ba1ad9625affe392d69b17cd1e85ee6d4604070de0dee6da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xe936fc79332de2ca7b1c06a70f81345aa2466958aab00f463e312ca0585e85cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x47c0131bd8a972c31596958aa86752ea18d60e33f1cd94d412b9e29fd6ab25a6\",\"license\":\"MIT\"},\"contracts/lib/acl/ACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\n// import \\\"../initializable/Initializable.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nlibrary ACLData {\\n    enum BulkOp { Grant, Revoke, Freeze }\\n\\n    struct BulkItem {\\n        BulkOp op;\\n        bytes4 role;\\n        address who;\\n    }\\n}\\n\\ncontract ACL is Initializable {\\n    bytes32 public constant ROOT_ROLE =\\n        this.grant.selector\\n        ^ this.revoke.selector\\n        ^ this.freeze.selector\\n        ^ this.bulk.selector\\n    ;\\n\\n    // \\\"Who\\\" constants\\n    address internal constant ANY_ADDR = address(type(uint160).max);\\n\\n    // \\\"Access\\\" flags\\n    address internal constant UNSET_ROLE = address(0);\\n    address internal constant FREEZE_FLAG = address(1); // Also used as \\\"who\\\"\\n    address internal constant ALLOW_FLAG = address(2);\\n        \\n    // hash(where, who, role) => Access flag(unset or allow) or ACLOracle (any other address denominates auth via ACLOracle)\\n    mapping (bytes32 => address) internal authPermissions;\\n    // hash(where, role) => true(role froze on the where), false(role is not frozen on the where)\\n    mapping (bytes32 => bool) internal freezePermissions;\\n\\n    event Granted(bytes32 indexed role, address indexed actor, address indexed who, address where, IACLOracle oracle);\\n    event Revoked(bytes32 indexed role, address indexed actor, address indexed who, address where);\\n    event Frozen(bytes32 indexed role, address indexed actor, address where);\\n\\n    modifier auth(address _where, bytes32 _role) {\\n        require(willPerform(_where, msg.sender, _role, msg.data), \\\"acl: auth\\\");\\n        _;\\n    }\\n\\n    function initACL(address _who) internal initializer {\\n        _initializeACL(address(this),  _who);\\n    }\\n    \\n    function grant(address _where, address _who, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _grant(_where, _who, _role);\\n    }\\n\\n    function grantWithOracle(address _where, address _who, bytes32 _role, IACLOracle _oracle) external auth(_where, ROOT_ROLE) {\\n        _grantWithOracle(_where, _who, _role, _oracle);\\n    }\\n\\n    function revoke(address _where, address _who, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _revoke(_where, _who, _role);\\n    }\\n\\n    function freeze(address _where, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _freeze(_where, _role);\\n    }\\n\\n    function bulk(address _where, ACLData.BulkItem[] calldata items) external auth(_where, ROOT_ROLE) {\\n        for (uint256 i = 0; i < items.length; i++) {\\n            ACLData.BulkItem memory item = items[i];\\n\\n            if (item.op == ACLData.BulkOp.Grant) _grant(_where, item.who, item.role);\\n            else if (item.op == ACLData.BulkOp.Revoke) _revoke(_where, item.who, item.role);\\n            else if (item.op == ACLData.BulkOp.Freeze) _freeze(_where, item.role);\\n        }\\n    }\\n\\n    function willPerform(address _where, address _who, bytes32 _role, bytes memory _data) internal returns (bool) {\\n        return _checkRole(_where, _who, _role, _data) // check if _who is eligible for _role on _where\\n            || _checkRole(_where, ANY_ADDR, _role, _data) // check if anyone is eligible for _role on _where\\n            || _checkRole(ANY_ADDR, _who, _role, _data); // check if _who is eligible for _role on any contract.\\n    }\\n\\n    function isFrozen(address _where, bytes32 _role) public view returns (bool) {\\n        return freezePermissions[freezeHash(_where, _role)];\\n    }\\n\\n    function _initializeACL(address _where, address _who) internal {\\n        _grant(_where, _who, ROOT_ROLE);\\n    }\\n\\n    function _grant(address _where, address _who, bytes32 _role) internal {\\n        _grantWithOracle(_where, _who, _role, IACLOracle(ALLOW_FLAG));\\n    }\\n\\n    function _grantWithOracle(address _where, address _who, bytes32 _role, IACLOracle _oracle) internal {\\n        require(!isFrozen(_where, _role), \\\"acl: frozen\\\");\\n\\n        bytes32 permission = permissionHash(_where, _who, _role);\\n        require(authPermissions[permission] == UNSET_ROLE, \\\"acl: role already granted\\\");\\n        authPermissions[permission] = address(_oracle);\\n\\n        emit Granted(_role, msg.sender, _who, _where, _oracle);\\n    }\\n\\n    function _revoke(address _where, address _who, bytes32 _role) internal {\\n        require(!isFrozen(_where, _role), \\\"acl: frozen\\\");\\n\\n        bytes32 permission = permissionHash(_where, _who, _role);\\n        require(authPermissions[permission] != UNSET_ROLE, \\\"acl: role already revoked\\\");\\n        authPermissions[permission] = UNSET_ROLE;\\n\\n        emit Revoked(_role, msg.sender, _who, _where);\\n    }\\n\\n    function _freeze(address _where, bytes32 _role) internal {\\n        require(!isFrozen(_where,_role), \\\"acl: frozen\\\");\\n\\n        bytes32 permission = freezeHash(_where, _role);\\n        require(!freezePermissions[permission], \\\"acl: role already freeze\\\");\\n        freezePermissions[freezeHash(_where, _role)] = true;\\n\\n        emit Frozen(_role, msg.sender, _where);\\n    }\\n\\n    function _checkRole(address _where, address _who, bytes32 _role, bytes memory _data) internal returns (bool) {\\n        address accessFlagOrAclOracle = authPermissions[permissionHash(_where, _who, _role)];\\n        \\n        if (accessFlagOrAclOracle != UNSET_ROLE) return false;\\n        if (accessFlagOrAclOracle == ALLOW_FLAG) return true;\\n\\n        // Since it's not a flag, assume it's an ACLOracle and try-catch to skip failures\\n        try IACLOracle(accessFlagOrAclOracle).willPerform(_where, _who, _role, _data) returns (bool allowed) {\\n            if (allowed) return true;\\n        } catch { }\\n        \\n        return false;\\n    }\\n\\n    function permissionHash(address _where, address _who, bytes32 _role) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _role));\\n    }\\n\\n    function freezeHash(address _where, bytes32 _role) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"FREEZE\\\", _where, _role));\\n    }\\n}\\n\\n\",\"keccak256\":\"0x4e08946d30ce43eb7af0e6738d55c5eef5fc5c983ea1ed3a4f7a126eeac9943d\",\"license\":\"MIT\"},\"contracts/lib/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IACLOracle {\\n    function willPerform(address where, address who, bytes32 role, bytes calldata data) external returns (bool allowed);\\n}\\n\",\"keccak256\":\"0xa013fabd06c108de996ae2f44257b51cb8d1177d06ea17f4839a343e8d462929\",\"license\":\"MIT\"},\"contracts/lib/component/Component.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./IDAO.sol\\\";\\n\\nabstract contract Component is TimeHelpers {\\n    IDAO internal dao;\\n    \\n    function initialize(IDAO _dao) public virtual  {\\n        dao = _dao;\\n    }\\n\\n    modifier authP(bytes32 role)  {\\n        require(dao.hasPermission(address(this), msg.sender, role, msg.data), \\\"auth: check\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5a3c55a44d394b3192ddb53e65dae442eb9e7c37f765db39a344b1981b2e28e6\",\"license\":\"MIT\"},\"contracts/lib/component/IDAO.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDAO {\\n    // ACL handling permission\\n    function hasPermission(address _where, address _who, bytes32 _role, bytes memory data) external returns(bool);\\n    // DAO Level membershipm permission\\n    function checkPermission(string calldata role) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x59f7162646b9646470d32b53875dbb96eb7ef4fb0e4faaa7e704d28075547935\",\"license\":\"MIT\"},\"contracts/lib/component/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0x12a68391cacafa493240511161a9d0d6fd0ffabf331f100f325ba0e3f8621c79\",\"license\":\"MIT\"},\"contracts/lib/component/Uint256Helpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = type(uint64).max;\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x4b09aab45cb86e0c398441c00b92782879cb580f4613cf21c2259b1f480754ac\",\"license\":\"MIT\"},\"contracts/lib/component/UpgradableComponent.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./Component.sol\\\";\\n\\nabstract contract UpgradableComponent is Component, UUPSUpgradeable, Initializable {\\n\\n    bytes32 public constant UPGRADE_ROLE = keccak256(\\\"UPGRADE_ROLE\\\");\\n    \\n    function _authorizeUpgrade(address /*_newImplementation*/) internal virtual override authP(UPGRADE_ROLE) {\\n    \\n    }\\n\\n}\\n\",\"keccak256\":\"0xd80fabaac86b317d73acda4b6c5de1687f12dc94795f05196e65650d0af4f39d\",\"license\":\"MIT\"},\"contracts/lib/governance-primitives/GovernancePrimitive.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../src/permissions/Permissions.sol\\\";\\nimport \\\"../../src/processes/Processes.sol\\\";\\nimport \\\"../../src/executor/Executor.sol\\\";\\nimport \\\"../../src/DAO.sol\\\";\\nimport \\\"../component/Component.sol\\\";\\n\\n/// @title Abstract implementation of the governance primitive\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract can be used to implement concrete stoppable governance primitives and being fully compatible with the DAO framework and UI of Aragon\\n/// @dev You only have to define the specific custom logic for your needs in _start, _execute, and _stop\\nabstract contract GovernancePrimitive is Component {\\n\\n    bytes32 public constant CREATE_PRIMITIVE_START_ROLE = keccak256(\\\"CREATE_PRIMITIVE_START_ROLE\\\");\\n    bytes32 public constant PRIMITIVE_EXECUTE_ROLE = keccak256(\\\"PRIMITIVE_EXECUTE_ROLE\\\");\\n\\n    string internal constant ERROR_EXECUTION_STATE_WRONG = \\\"ERROR_EXECUTION_STATE_WRONG\\\";\\n    string internal constant ERROR_NOT_ALLOWED_TO_EXECUTE = \\\"ERROR_NOT_ALLOWED_TO_EXECUTE\\\";\\n    string internal constant ERROR_NOT_ALLOWED_TO_START = \\\"ERROR_NOT_ALLOWED_TO_START\\\";\\n    string internal constant ERROR_NO_EXECUTION = \\\"ERROR_NO_EXECUTION\\\";\\n    \\n    // The states a execution can have\\n    enum State {\\n        RUNNING, \\n        STOPPED,\\n        HALTED,\\n        EXECUTED\\n    }\\n\\n    struct Proposal {\\n        string processName; // The hash of the process that should get called\\n        Executor.Action[] actions; // The actions that should get executed in the end\\n        bytes metadata; // IPFS hash pointing to the metadata as description, title, image etc. \\n        bytes additionalArguments; // Optional additional arguments a process resp. governance primitive does need\\n    }\\n\\n    struct Execution { // A execution contains the process to execute, the proposal passed by the user, and the state of the execution.\\n        uint256 id;\\n        Processes.Process process;\\n        Proposal proposal;\\n        State state;\\n    }\\n\\n    uint256 private executionsCounter;\\n    mapping(uint256 => Execution) private executions;\\n\\n    event GovernancePrimitiveStarted(Execution indexed execution, uint256 indexed executionId);\\n    event GovernancePrimitiveExecuted(Execution indexed execution, uint256 indexed executionId);\\n\\n    modifier executionExist(uint256 _id) {\\n        require(_id < executionsCounter, ERROR_NO_EXECUTION);\\n        _;\\n    }\\n\\n    /// @notice If called the governance primitive starts a new execution.\\n    /// @dev The state of the container does get changed to RUNNING, the execution struct gets created, and the concrete implementation in _start called.\\n    /// @param process The process definition.\\n    /// @param proposal The proposal for execution submitted by the user.\\n    /// @return executionId The id of the newly created execution.\\n    function start(Processes.Process calldata process, Proposal calldata proposal) \\n        external \\n        authP(CREATE_PRIMITIVE_START_ROLE) \\n        returns (uint256 executionId) \\n    {\\n        require(\\n            dao.checkPermission(process.permissions.start),\\n            ERROR_NOT_ALLOWED_TO_START\\n        );\\n\\n        executionsCounter++;\\n\\n        // the reason behind this - https://matrix.to/#/!poXqlbVpQfXKWGseLY:gitter.im/$6IhWbfjcTqmLoqAVMopWFuIhlQwsoaIRxmsXhhmsaSs?via=gitter.im&via=matrix.org&via=ekpyron.org\\n        Execution storage execution = executions[executionsCounter];\\n        execution.id = executionsCounter;\\n        execution.process = process;\\n        execution.proposal = proposal;\\n        execution.state = State.RUNNING;\\n\\n        Execution memory _execution = execution;\\n\\n        _start(_execution); // \\\"Hook\\\" to add logic in start of a concrete implementation.\\n\\n        emit GovernancePrimitiveStarted(execution, executionId);\\n\\n        return executionsCounter;\\n    }\\n    \\n    /// @notice If called the proposed actions do get executed.\\n    /// @dev The state of the container does get changed to EXECUTED, the pre-execute method _execute does get called, and the actions executed.\\n    /// @param executionId The id of the execution struct.\\n    function execute(uint256 executionId) public executionExist(executionId) authP(PRIMITIVE_EXECUTE_ROLE) {\\n        Execution storage execution = _getExecution(executionId);\\n        \\n        require(execution.state == State.RUNNING, ERROR_EXECUTION_STATE_WRONG);\\n        require(\\n            dao.checkPermission(execution.process.permissions.execute),\\n            ERROR_NOT_ALLOWED_TO_EXECUTE\\n        );\\n\\n        execution.state = State.EXECUTED;\\n\\n        _execute(execution); // \\\"Hook\\\" to add logic in execute of a concrete implementation\\n\\n        // Executor(dao.executor.address).execute(execution.proposal.actions);\\n\\n        emit GovernancePrimitiveExecuted(execution, executionId);\\n    }\\n\\n    /// @dev Internal helper and abstraction to get a execution struct.\\n    /// @param executionId The id of the execution struct.\\n    function _getExecution(uint256 executionId) internal view returns (Execution storage execution) {\\n        return executions[executionId];\\n    }\\n\\n    /// @dev The concrete implementation of stop.\\n    /// @param execution The execution struct with all the informations needed.\\n    function _start(Execution memory execution) internal virtual;\\n\\n    /// @dev The concrete pre-execution call.\\n    /// @param execution The execution struct with all the informations needed.\\n    function _execute(Execution memory execution) internal virtual;\\n}\\n\",\"keccak256\":\"0xb23ccc03054f8693f8213bb7c3e218cf86389b8fd17179beaaae8c7ee9d3f428\",\"license\":\"MIT\"},\"contracts/lib/governance-primitives/voting/VotingGovernancePrimitive.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./../GovernancePrimitive.sol\\\";\\n\\n/// @title Abstract implementation of the voting governance primitive\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract can be used to implement concrete voting governance primitives and being fully compatible with the DAO framework and UI of Aragon\\n/// @dev You only have to define the specific custom logic of your needs in _vote, _start, and _execute\\nabstract contract VotingGovernancePrimitive is GovernancePrimitive {\\n    event VotedOnGovernancePrimitive(Execution indexed execution, bytes indexed data, uint256 executionId);\\n\\n    /// @notice If called a new vote does get added.\\n    /// @param executionId The identifier of the current execution\\n    /// @param data The arbitrary custom data used for the concrete implementation\\n    function vote(uint256 executionId, bytes calldata data) external executionExist(executionId) {\\n        Execution memory execution = _getExecution(executionId);\\n        \\n        require(execution.state == State.RUNNING, ERROR_EXECUTION_STATE_WRONG);\\n        require(\\n            dao.checkPermission(execution.process.permissions.vote),\\n            ERROR_EXECUTION_STATE_WRONG\\n        );\\n\\n        _vote(executionId, data);\\n\\n        emit VotedOnGovernancePrimitive(execution, data, executionId);\\n    }\\n\\n    /// @dev The concrete implementation of vote.\\n    /// @param data The arbitrary custom data used for the concrete implementation\\n    function _vote(uint256 executionId, bytes calldata data) internal virtual;\\n}\\n\\n\",\"keccak256\":\"0x50824b3566be0fbd0a5ff3740a859ca743e9252c6a885fec48d40d3872cd371a\",\"license\":\"MIT\"},\"contracts/lib/permissions/PermissionValidator.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Abstract implementation of the permission validator\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract can be used to implement concrete permission validators and being fully compatible with the DAO framework and UI of Aragon\\n/// @dev You only have to define the specific custom logic for your needs in isValid\\nabstract contract PermissionValidator {\\n      /// @notice The method to initialize the validator.\\n      /// @dev Inherited contracts can override this and implement their own initialization logic.\\n      /// @param data The encoded data that each inherited contract decodes.\\n      function initialize(bytes memory data) external virtual {}\\n      /// @notice The method to validate a user permission.\\n      /// @dev The state of the container does get changed to RUNNING, the execution struct gets created, and the concrete implementation in _start called.\\n      /// @param caller The caler of this contract\\n      /// @return valid Returns a bool depending on the validity of the permission\\n      function isValid(address caller, bytes memory data) external view virtual returns(bool valid);\\n}\\n\",\"keccak256\":\"0xdd062a060ec7c36ff944fdaa2353b57429f0837fadcee4883d0ff2b1e82eb5b0\",\"license\":\"MIT\"},\"contracts/lib/proxy/ProxyHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nlibrary ProxyHelpers {\\n\\n    function createProxy(address _base, bytes memory _data) internal returns(address) {\\n        address addr = address(new ERC1967Proxy(_base, _data));\\n        return addr;\\n    } \\n    \\n}\\n\",\"keccak256\":\"0xafc629a5511d9b6483ee6a20b10da517a64bf8e4402e6734293e28b30fac28dc\",\"license\":\"MIT\"},\"contracts/src/DAO.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../lib/governance-primitives/GovernancePrimitive.sol\\\";\\nimport \\\"./permissions/Permissions.sol\\\";\\nimport \\\"./processes/Processes.sol\\\";\\nimport \\\"./executor/Executor.sol\\\";\\nimport \\\"../lib/component/UpgradableComponent.sol\\\";\\nimport \\\"../lib/acl/ACL.sol\\\";\\nimport \\\"../lib/component/IDAO.sol\\\";\\n\\n/// @title The public interface of the Aragon DAO framework.\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract is the entry point to the Aragon DAO framework and provides our users a simple and use to use public interface.\\n/// @dev Public API of the Aragon DAO framework\\ncontract DAO is IDAO, Initializable, UUPSUpgradeable, ACL {\\n    \\n    bytes32 public constant DAO_CONFIG_ROLE = keccak256(\\\"DAO_CONFIG_ROLE\\\");\\n    bytes32 public constant UPGRADE_ROLE = keccak256(\\\"UPGRADE_ROLE\\\");\\n\\n    event NewProposal(GovernancePrimitive.Proposal indexed proposal, Processes.Process indexed process, address indexed submitter, uint256 executionId);\\n    event SetMetadata(bytes metadata);\\n\\n    bytes public metadata;\\n    Processes public processes;\\n    Permissions public permissions;\\n    Executor public executor;\\n\\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _metadata IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO\\n    /// @param _processes All the processes a DAO has\\n    /// @param _permissions All roles a DAO has\\n    /// @param _executor The executor to interact with any internal or third party contract\\n    function initialize(\\n        bytes calldata _metadata,\\n        Processes _processes,\\n        Permissions _permissions,\\n        Executor _executor,\\n        address _aclRoot\\n    ) public initializer {\\n        processes = _processes;\\n        permissions = _permissions;\\n        executor = _executor;\\n\\n        ACL.initACL(_aclRoot);\\n\\n        emit SetMetadata(_metadata);\\n    }\\n\\n    function _authorizeUpgrade(address /*_newImplementation*/) internal virtual override {\\n        require(willPerform(address(this), msg.sender, UPGRADE_ROLE, msg.data), \\\"auth:check\\\");\\n    }\\n\\n    modifier authP(bytes32 role)  {\\n        require(willPerform(address(this), msg.sender, role, msg.data), \\\"auth: check\\\");\\n        _;\\n    }\\n\\n    function hasPermission(address _where, address _who, bytes32 _role, bytes memory data) public override returns(bool) {\\n        return willPerform(_where, _who, _role, data);\\n    }\\n\\n    function checkPermission(string calldata _role) external view override returns(bool) {\\n        return permissions.checkPermission(_role);\\n    }\\n\\n    /// @notice If called a new governance process based on the submitted proposal does get kicked off\\n    /// @dev Validates the permissions, validates the actions passed, and start a new process execution based on the proposal.\\n    /// @param proposal The proposal submission of the user\\n    /// @return process The started process with his definition\\n    /// @return executionId The execution id\\n    function start(GovernancePrimitive.Proposal calldata proposal) external returns (Processes.Process memory process, uint256 executionId) {\\n        return processes.start(proposal);\\n    }\\n\\n    /// @notice If called a executable proposal does get executed.\\n    /// @dev Some governance primitives needed to be executed with a additional user based call.\\n    /// @param executionID The executionId\\n    /// @param governancePrimitive The primitive to call execute.\\n    function execute(uint256 executionID, GovernancePrimitive governancePrimitive) external {\\n        GovernancePrimitive(governancePrimitive).execute(executionID);\\n    }\\n\\n    /// @notice Update the DAO metadata\\n    /// @dev Sets a new IPFS hash\\n    /// @param _metadata The IPFS hash of the new metadata object\\n    function setMetadata(bytes calldata _metadata) external authP(DAO_CONFIG_ROLE) {\\n        emit SetMetadata(_metadata);   \\n    }\\n\\n    /// @notice Adds a new role to the permission management\\n    /// @dev Based on the name and the passed Permission struct does a new entry get added in Permissions\\n    /// @param role The name of the role as string\\n    /// @param permission The struct defining the logical operator and validators set for this role\\n    function addRole(string calldata role, Permissions.Permission calldata permission) external authP(DAO_CONFIG_ROLE) {\\n        permissions.setRole(role, permission);\\n    }\\n\\n    /// @notice Adds a new process to the DAO\\n    /// @dev Based on the name and the passed Process struct does a new entry get added in Processes\\n    /// @param name The name of the process as string\\n    /// @param process The struct defining the governance primitive, allowed actions, permissions, and metadata IPFS hash to describe the process \\n    function setProcess(string calldata name, Processes.Process calldata process) external authP(DAO_CONFIG_ROLE) {\\n        processes.setProcess(name, process);\\n    }\\n\\n    /// @notice Sets a new executor address in case it needs to get replaced at all\\n    /// @dev Updates the executor contract property\\n    /// @param _executor The address of the new executor\\n    function setExecutor(Executor _executor) external authP(DAO_CONFIG_ROLE) {\\n        executor = _executor;\\n    }\\n} \\n\",\"keccak256\":\"0x54781297f07049cfbd3a0a57f7282adbb803b7155d96f7ddd5046aa4a4b48a01\",\"license\":\"MIT\"},\"contracts/src/executor/Executor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../lib/component/UpgradableComponent.sol\\\";\\nimport \\\"../../lib/component/IDAO.sol\\\";\\n\\n/// @title Implementation of the Executor\\n/// @author Sarkawt Azad - Aragon Association - 2021\\n/// @notice This contract represent the execution layer.\\ncontract Executor is UpgradableComponent {\\n\\n  bytes32 public constant EXEC_ROLE = keccak256(\\\"EXEC_ROLE\\\");\\n\\n  event Executed(\\n    address indexed actor,\\n    Action[] indexed actions,\\n    bytes[] execResults\\n  );\\n\\n  string private constant ERROR_ACTION_CALL_FAILED = \\\"EXCECUTOR_ACTION_CALL_FAILED\\\";\\n\\n  struct Action {\\n    address to; // Address to call.\\n    uint256 value; // Value to be sent with the call. for example (ETH)\\n    bytes data;\\n  }\\n\\n  constructor() initializer {}\\n\\n  /// @dev Used for UUPS upgradability pattern\\n  /// @param _dao The DAO contract of the current DAO\\n  function initialize(IDAO _dao) public override initializer {\\n    Component.initialize(_dao);\\n  } \\n\\n  /// @notice If called, the list of provided actions will be executed.\\n  /// @dev It run a loop through the array of acctions and execute one by one.\\n  /// @dev If one acction fails, all will be reverted.\\n  /// @param actions The aray of actions\\n  function execute(Action[] memory actions) external authP(EXEC_ROLE) {\\n    bytes[] memory execResults = new bytes[](actions.length);\\n\\n    for (uint256 i = 0; i < actions.length; i++) {\\n      (bool success, bytes memory response) = actions[i].to.call{ value: actions[i].value }(actions[i].data);\\n\\n      require(success, ERROR_ACTION_CALL_FAILED);\\n\\n      execResults[i] = response;\\n    }\\n\\n    emit Executed(msg.sender, actions, execResults);\\n  }\\n}\\n\",\"keccak256\":\"0x943f443b1dfc3bdd961a50bb8a88e13f3488fe07a622244ec83779c382299e0c\",\"license\":\"MIT\"},\"contracts/src/factories/CoreFactory.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../DAO.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"../governance-primitives/voting/SimpleVoting.sol\\\";\\nimport \\\"../tokens/GovernanceERC20.sol\\\";\\nimport \\\"../tokens/GovernanceWrappedERC20.sol\\\";\\nimport \\\"../registry/Registry.sol\\\";\\nimport \\\"../processes/Processes.sol\\\";\\nimport \\\"../permissions/Permissions.sol\\\";\\nimport \\\"../executor/Executor.sol\\\";\\nimport \\\"../../lib/permissions/PermissionValidator.sol\\\";\\nimport \\\"../../lib/proxy/ProxyHelpers.sol\\\";\\n\\ncontract CoreFactory {\\n\\n    using Address for address;\\n    \\n    string private constant FACTORY_VALIDATORS_MISMATCH = \\\"FACTORY_VALIDATORS_LENGTH_MISMATCH\\\";\\n    string private constant FACTORY_VALIDATORS_TOO_MANY = \\\"FACTORY_VALIDATORS_TOO_MANY\\\";\\n\\n\\n    address public immutable processesBase;\\n    address public immutable permissionsBase;\\n    address public immutable executorBase;\\n\\n    constructor() {\\n        processesBase = address(new Processes());\\n        permissionsBase = address(new Permissions());\\n        executorBase = address(new Executor());\\n    }\\n\\n    function newCore(IDAO _dao) external returns(address, address, address) {\\n        address processes = ProxyHelpers.createProxy(processesBase, abi.encodeWithSelector(Processes.initialize.selector, _dao));\\n        address permissions = ProxyHelpers.createProxy(permissionsBase, abi.encodeWithSelector(Permissions.initialize.selector, _dao));\\n        address executor = ProxyHelpers.createProxy(executorBase, abi.encodeWithSelector(Executor.initialize.selector, _dao));\\n        \\n        return (processes, permissions, executor);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x7c4534a4eb4307a40af01c8ecc4ef25081da8fac93ee3c10e46866aab12e133e\",\"license\":\"MIT\"},\"contracts/src/factories/DAOFactory.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../DAO.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"../governance-primitives/voting/SimpleVoting.sol\\\";\\nimport \\\"../tokens/GovernanceERC20.sol\\\";\\nimport \\\"../tokens/GovernanceWrappedERC20.sol\\\";\\nimport \\\"../registry/Registry.sol\\\";\\nimport \\\"./TokenFactory.sol\\\";\\nimport \\\"./CoreFactory.sol\\\";\\nimport \\\"../processes/Processes.sol\\\";\\nimport \\\"../permissions/Permissions.sol\\\";\\nimport \\\"../executor/Executor.sol\\\";\\nimport \\\"../../lib/permissions/PermissionValidator.sol\\\";\\nimport \\\"../../lib/proxy/ProxyHelpers.sol\\\";\\n\\ncontract DAOFactory {\\n\\n    using Address for address;\\n    \\n    string private constant FACTORY_VALIDATORS_MISMATCH = \\\"FACTORY_VALIDATORS_LENGTH_MISMATCH\\\";\\n    string private constant FACTORY_VALIDATORS_TOO_MANY = \\\"FACTORY_VALIDATORS_TOO_MANY\\\";\\n\\n    address public immutable daoBase;\\n    address public immutable votingBase;\\n    address public immutable vaultBase;\\n\\n    Registry public immutable registry;\\n    TokenFactory public immutable tokenFactory;\\n    CoreFactory public immutable coreFactory;\\n\\n    constructor(\\n        Registry _registry,\\n        TokenFactory _tokenFactory,\\n        CoreFactory _coreFactory\\n    ) {\\n        registry = _registry;\\n        tokenFactory = _tokenFactory;\\n        coreFactory = _coreFactory;\\n\\n        votingBase = address(new SimpleVoting());\\n        vaultBase = address(new Vault());\\n        daoBase = address(new DAO());\\n    }\\n\\n    function newDAO(\\n        string calldata _name,\\n        bytes calldata _metadata,\\n        TokenFactory.TokenConfig calldata _tokenConfig,\\n        uint256[3] calldata _votingSettings\\n    ) external {\\n        address token = tokenFactory.newToken(_tokenConfig);\\n\\n        DAO dao = DAO(ProxyHelpers.createProxy(daoBase, bytes(\\\"\\\")));\\n\\n        // TODO: The voting/vault should be installed through installer(marketplace)\\n        address voting = ProxyHelpers.createProxy(votingBase, abi.encodeWithSelector(SimpleVoting.initialize.selector, dao, token, _votingSettings));\\n        address vault = ProxyHelpers.createProxy(vaultBase, abi.encodeWithSelector(Vault.initialize.selector, dao));\\n\\n        (address processes, address permissions, address executor) = coreFactory.newCore(dao);\\n        \\n        dao.initialize(\\n            _metadata,\\n            Processes(processes),\\n            Permissions(permissions),\\n            Executor(executor),\\n            address(this) // initial ACL root on DAO itself.\\n        );  \\n\\n        // CREATING FINAL PERMISSIONS\\n        // The below line means that on any contract's function that has UPGRADE_ROLE, \\n        // executor will be able to call it, unless changedd specifically.\\n        dao.grant(address(type(uint160).max), executor, Executor(executor).UPGRADE_ROLE()); // TODO: we can bring address(type(uint160).max) from ACL for consistency.\\n        // vault permissions\\n        dao.grant(vault, executor, Vault(payable(vault)).TRANSFER_ROLE()); // TODO: do we really need to cast it to payable ? \\n        // permissions permissions\\n        dao.grant(permissions, address(dao), Permissions(permissions).PERMISSIONS_SET_ROLE());\\n        // processes permissions\\n        dao.grant(processes, address(dao), Processes(processes).PROCESSES_START_ROLE());\\n        dao.grant(processes, address(dao), Processes(processes).PROCESSES_SET_ROLE());\\n        // dao permissions\\n        dao.grant(address(dao), executor, dao.DAO_CONFIG_ROLE());\\n        // executor permissions\\n        dao.grant(executor, voting, Executor(executor).EXEC_ROLE());\\n        // voting permissions\\n        dao.grant(voting, processes, SimpleVoting(voting).CREATE_PRIMITIVE_START_ROLE());\\n        dao.grant(voting, address(dao), SimpleVoting(voting).PRIMITIVE_EXECUTE_ROLE());\\n        dao.grant(voting, executor, SimpleVoting(voting).MODIFY_SUPPORT_ROLE());\\n        dao.grant(voting, executor, SimpleVoting(voting).MODIFY_QUORUM_ROLE());\\n\\n        registry.register(\\n            _name,\\n            msg.sender, \\n            dao,\\n            token,\\n            SimpleVoting(voting),\\n            Vault(payable(vault)),\\n            Executor(executor),\\n            Processes(processes),\\n            Permissions(permissions)\\n        );\\n    }\\n}\\n\\n\",\"keccak256\":\"0x64900c96b6f39cb379f135002194150f0f856df73baa02b4f7e41bbadb9b7fcd\",\"license\":\"MIT\"},\"contracts/src/factories/TokenFactory.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../DAO.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"../governance-primitives/voting/SimpleVoting.sol\\\";\\nimport \\\"../tokens/GovernanceERC20.sol\\\";\\nimport \\\"../tokens/GovernanceWrappedERC20.sol\\\";\\nimport \\\"../registry/Registry.sol\\\";\\nimport \\\"../processes/Processes.sol\\\";\\nimport \\\"../permissions/Permissions.sol\\\";\\nimport \\\"../executor/Executor.sol\\\";\\nimport \\\"../../lib/permissions/PermissionValidator.sol\\\";\\nimport \\\"../../lib/proxy/ProxyHelpers.sol\\\";\\n\\ncontract TokenFactory {\\n\\n    using Address for address;\\n    \\n    string private constant FACTORY_VALIDATORS_MISMATCH = \\\"FACTORY_VALIDATORS_LENGTH_MISMATCH\\\";\\n    string private constant FACTORY_VALIDATORS_TOO_MANY = \\\"FACTORY_VALIDATORS_TOO_MANY\\\";\\n\\n    address public immutable governanceERC20Base;\\n    address public immutable governanceWrappedERC20Base;\\n  \\n    struct TokenConfig {\\n        address addr;\\n        string name;\\n        string symbol;\\n    }\\n\\n    constructor() {\\n        governanceERC20Base = address(new GovernanceERC20());\\n        governanceWrappedERC20Base = address(new GovernanceWrappedERC20());\\n    }\\n\\n    function newToken(TokenConfig calldata _tokenConfig) external returns(address) {\\n        // setup Token\\n        // TODO: Do we wanna leave the option not to use any proxy pattern in such case ? \\n        // delegateCall is costly if so many calls are needed for a contract after the deployment.\\n        address token = _tokenConfig.addr;\\n        if(token == address(0)) {\\n            token = Clones.clone(governanceERC20Base);\\n            GovernanceERC20(token).initialize(_tokenConfig.name, _tokenConfig.symbol);\\n        } else {\\n            token = Clones.clone(governanceWrappedERC20Base);\\n            // user already has a token. we need to wrap it in our new token to make it governance token.\\n            GovernanceWrappedERC20(token).initialize(IERC20Upgradeable(_tokenConfig.addr), _tokenConfig.name, _tokenConfig.symbol);\\n        }\\n        return token;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3b11083f5c3ee2df4b811d988eed45698b83d2887fc62e412701e12c93ff51ff\",\"license\":\"MIT\"},\"contracts/src/governance-primitives/voting/SimpleVoting.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"../../../lib/governance-primitives/voting/VotingGovernancePrimitive.sol\\\";\\nimport \\\"../../../lib/component/IDAO.sol\\\";\\nimport \\\"../../executor/Executor.sol\\\";\\nimport \\\"../../../lib/component/UpgradableComponent.sol\\\";\\n\\ncontract SimpleVoting is VotingGovernancePrimitive, UpgradableComponent {\\n    \\n    bytes32 public constant MODIFY_SUPPORT_ROLE = keccak256(\\\"MODIFY_SUPPORT_ROLE\\\");\\n    bytes32 public constant MODIFY_QUORUM_ROLE = keccak256(\\\"MODIFY_QUORUM_ROLE\\\");\\n\\n    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\\n\\n    enum VoterState { Absent, Yea, Nay }\\n\\n    struct Vote {\\n        uint64 startDate;\\n        uint64 snapshotBlock;\\n        uint64 supportRequiredPct;\\n        uint64 minAcceptQuorumPct;\\n        uint256 yea;\\n        uint256 nay;\\n        uint256 votingPower;\\n        mapping (address => VoterState) voters;\\n    }\\n\\n    mapping (uint256 => Vote) internal votes;\\n    uint256 public votesLength;\\n    \\n    uint64 public supportRequiredPct;\\n    uint64 public minAcceptQuorumPct;\\n    uint64 public voteTime;\\n\\n    ERC20VotesUpgradeable public token;\\n    \\n    string private constant ERROR_NO_VOTE = \\\"VOTING_NO_VOTE\\\";\\n    string private constant ERROR_INIT_PCTS = \\\"VOTING_INIT_PCTS\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_PCTS = \\\"VOTING_CHANGE_SUPPORT_PCTS\\\";\\n    string private constant ERROR_CHANGE_QUORUM_PCTS = \\\"VOTING_CHANGE_QUORUM_PCTS\\\";\\n    string private constant ERROR_INIT_SUPPORT_TOO_BIG = \\\"VOTING_INIT_SUPPORT_TOO_BIG\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = \\\"VOTING_CHANGE_SUPP_TOO_BIG\\\";\\n    string private constant ERROR_CAN_NOT_VOTE = \\\"VOTING_CAN_NOT_VOTE\\\";\\n    string private constant ERROR_CAN_NOT_EXECUTE = \\\"VOTING_CAN_NOT_EXECUTE\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"VOTING_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_NO_VOTING_POWER = \\\"VOTING_NO_VOTING_POWER\\\";\\n\\n    event StartVote(uint256 indexed voteId, address indexed creator, string description);\\n    event CastVote(uint256 indexed voteId, address indexed voter, bool voterSupports, uint256 stake);\\n    event ExecuteVote(uint256 indexed voteId);\\n    event ChangeSupportRequired(uint64 supportRequiredPct);\\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\\n\\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _dao The DAO contract of the current DAO\\n    function initialize(IDAO _dao, ERC20VotesUpgradeable _token, uint64[3] calldata _voteSettings) public initializer { \\n        token = _token;\\n\\n        require(_voteSettings[0] <= _voteSettings[1], ERROR_INIT_PCTS);\\n        require(_voteSettings[1] < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);\\n\\n        minAcceptQuorumPct = _voteSettings[0];\\n        supportRequiredPct = _voteSettings[1]; \\n        voteTime = _voteSettings[2];\\n\\n        Component.initialize(_dao);\\n    }\\n\\n    /**\\n    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\\n    * @param _supportRequiredPct New required support\\n    */\\n    function changeSupportRequiredPct(uint64 _supportRequiredPct) external authP(MODIFY_SUPPORT_ROLE) {\\n        require(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\\n        supportRequiredPct = _supportRequiredPct;\\n\\n        emit ChangeSupportRequired(_supportRequiredPct);\\n    }\\n\\n    /**\\n    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\\n    * @param _minAcceptQuorumPct New acceptance quorum\\n    */\\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct) external authP(MODIFY_QUORUM_ROLE) {\\n        require(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n\\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\\n    }\\n\\n    /**\\n    * @notice Create a new vote on this concrete implementation\\n    * @param execution all the details necessary to create a new vote.\\n    */\\n    function _start(Execution memory execution) internal override {\\n        (\\n            string memory description, \\n            bool executeIfDecided,\\n            bool castVote\\n        ) = abi.decode(execution.proposal.additionalArguments, (string, bool, bool));\\n\\n        uint64 snapshotBlock = getBlockNumber64() - 1; \\n        \\n        uint256 votingPower = token.getPastTotalSupply(snapshotBlock);\\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\\n\\n        uint256 voteId = execution.id;\\n\\n        Vote storage vote_ = votes[voteId];\\n        vote_.startDate = getTimestamp64();\\n        vote_.snapshotBlock = snapshotBlock;\\n        vote_.supportRequiredPct = supportRequiredPct;\\n        vote_.minAcceptQuorumPct = minAcceptQuorumPct;\\n        vote_.votingPower = votingPower;\\n\\n        emit StartVote(voteId, msg.sender, description);\\n    \\n        if (castVote && canVote(voteId, msg.sender)) {\\n            _vote(voteId, true, msg.sender, executeIfDecided);\\n        }\\n    }\\n\\n    /**\\n    * @dev Overriden function that actually gets called from the VotingGovernancePrimitive.\\n    * @param data abi encoded data that includes necessary parameters to vote.\\n    */\\n    function _vote(uint256 _voteId, bytes calldata data) internal override {\\n        (\\n            bool _supports,\\n            bool _executesIfDecided\\n        ) = abi.decode(data, (bool, bool));\\n\\n        require(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);\\n\\n        _vote(_voteId, _supports, msg.sender, _executesIfDecided);\\n    }\\n\\n    /**\\n    * @dev Internal function to cast a vote. It assumes the queried vote exists. \\n    * @param _voteId voteId\\n    * @param _supports whether user supports the decision or not\\n    * @param _voter the voter address\\n    * @param _executesIfDecided if true, and it's the last vote required, immediatelly executes a vote.\\n    */\\n    function _vote(uint256 _voteId, bool _supports, address _voter, bool _executesIfDecided) internal {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        // This could re-enter, though we can assume the governance token is not malicious\\n        uint256 voterStake = token.getPastVotes(_voter, vote_.snapshotBlock);\\n        VoterState state = vote_.voters[_voter];\\n\\n        // If voter had previously voted, decrease count\\n        if (state == VoterState.Yea) {\\n            vote_.yea = vote_.yea - voterStake;\\n        } else if (state == VoterState.Nay) {\\n            vote_.nay = vote_.nay - voterStake;\\n        }\\n\\n        if (_supports) {\\n            vote_.yea = vote_.yea + voterStake;\\n        } else {\\n            vote_.nay = vote_.nay + voterStake;\\n        }\\n\\n        vote_.voters[_voter] = _supports ? VoterState.Yea : VoterState.Nay;\\n\\n        emit CastVote(_voteId, _voter, _supports, voterStake);\\n\\n        if (_executesIfDecided && _canExecute(_voteId)) {\\n           execute(_voteId);\\n        }\\n    }\\n\\n    /**\\n    * @dev Internal override function hook to check if vote can be executed. \\n           Gets called from GovernancePrimitive\\n    * @param execution current execution data \\n    */\\n    function _execute(Execution memory execution) internal view override {\\n        require(_canExecute(execution.id), ERROR_CAN_NOT_EXECUTE);\\n    }\\n    \\n    /**\\n    * @dev Return the state of a voter for a given vote by its ID\\n    * @param _voteId Vote identifier\\n    * @return VoterState of the requested voter for a certain vote\\n    */\\n    function getVoterState(uint256 _voteId, address _voter) public view executionExist(_voteId) returns (VoterState) {\\n       return votes[_voteId].voters[_voter];\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a voter can participate on a vote. It assumes the queried vote exists.\\n    * @param _voteId the vote Id\\n    * @param _voter the address of the voter to check\\n    * @return bool true if user is allowed to vote\\n    */\\n    function canVote(uint256 _voteId, address _voter) public view executionExist(_voteId) returns (bool) {\\n       return _canVote(_voteId, _voter);\\n    }\\n\\n    /**\\n    * @dev Return all information for a vote by its ID\\n    * @param _voteId Vote id\\n    * @return open Vote open status\\n    * @return executed Vote executed status\\n    * @return startDate start date\\n    * @return snapshotBlock snapshot block\\n    * @return supportRequired support required\\n    * @return minAcceptQuorum minimum acceptance quorum\\n    * @return yea yeas amount\\n    * @return nay nays amount\\n    * @return votingPower power\\n    * @return actions Actions\\n    */\\n    function getVote(uint256 _voteId)\\n        public\\n        view\\n        executionExist(_voteId)\\n        returns (\\n            bool open,\\n            bool executed,\\n            uint64 startDate,\\n            uint64 snapshotBlock,\\n            uint64 supportRequired,\\n            uint64 minAcceptQuorum,\\n            uint256 yea,\\n            uint256 nay,\\n            uint256 votingPower,\\n            Executor.Action[] memory actions\\n        )\\n    {\\n        Vote storage vote_ = votes[_voteId];\\n        \\n        open = _isVoteOpen(vote_, _voteId);\\n        executed = _isVoteExecuted(_voteId);\\n        startDate = vote_.startDate;\\n        snapshotBlock = vote_.snapshotBlock;\\n        supportRequired = vote_.supportRequiredPct;\\n        minAcceptQuorum = vote_.minAcceptQuorumPct;\\n        yea = vote_.yea;\\n        nay = vote_.nay;\\n        votingPower = vote_.votingPower;\\n        actions = _getExecution(_voteId).proposal.actions;\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a voter can participate on a vote. It assumes the queried vote exists.\\n    * @param _voteId the vote Id\\n    * @param _voter the address of the voter to check\\n    * @return True if the given voter can participate a certain vote, false otherwise\\n    */\\n    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n        return _isVoteOpen(vote_, _voteId) && token.getPastVotes(_voter, vote_.snapshotBlock) > 0;\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a vote is still open\\n    * @param vote_ the vote struct\\n    * @param voteId vote id\\n    * @return True if the given vote is open, false otherwise\\n    */\\n    function _isVoteOpen(Vote storage vote_, uint256 voteId) internal view returns (bool) {\\n        return getTimestamp64() < vote_.startDate + voteTime && _isVoteExecuted(voteId);\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a vote is executed\\n    * @param _voteId vote id\\n    * @return True if the given vote is open, false otherwise\\n    */\\n    function _isVoteExecuted(uint256 _voteId) internal view returns(bool) {\\n        return _getExecution(_voteId).state == State.EXECUTED;\\n    }\\n\\n    /**\\n    * @dev Internal function to check if a vote can be executed. It assumes the queried vote exists.\\n    * @param _voteId vote id\\n    * @return True if the given vote can be executed, false otherwise\\n    */\\n    function _canExecute(uint256 _voteId) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        if (_isVoteExecuted(_voteId)) {\\n            return false;\\n        }\\n\\n        // Voting is already decided\\n        if (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {\\n            return true;\\n        }\\n\\n        // Vote ended?\\n        if (_isVoteOpen(vote_, _voteId)) {\\n            return false;\\n        }\\n        // Has enough support?\\n        uint256 totalVotes = vote_.yea + vote_.nay;\\n        if (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {\\n            return false;\\n        }\\n        // Has min quorum?\\n        if (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\\n    * @param _value the current value \\n    * @param _total the total value\\n    * @param _pct the required support percentage\\n    * @return returns if the _value is _pct or more percentage of _total. \\n    */\\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\\n       if (_total == 0) {\\n           return false;\\n       }\\n    \\n       uint256 computedPct = _value * PCT_BASE / _total;\\n       return computedPct > _pct;\\n    }\\n}\\n\",\"keccak256\":\"0x1bb585638646c05fa758f90b6a86e62d9080a266a36aa9d174380046f1a3f735\",\"license\":\"MIT\"},\"contracts/src/permissions/Permissions.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../lib/permissions/PermissionValidator.sol\\\";\\nimport \\\"../../lib/component/IDAO.sol\\\";\\nimport \\\"../../lib/component/UpgradableComponent.sol\\\";\\n\\n\\n// TODO: Add update, remove etc. role\\n/// @title The permissions contract responsible to handle all the governance process related permissions.\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract is a central point of the Aragon DAO framework and handles all the permissions and stores the different groups a DAO can have.\\ncontract Permissions is UpgradableComponent {\\n    \\n    bytes32 public constant PERMISSIONS_SET_ROLE = keccak256(\\\"PERMISSIONS_SET_ROLE\\\");\\n    bytes32 public constant PERMISSIONS_ADD_VALIDATOR_ROLE = keccak256(\\\"PERMISSIONS_ADD_VALIDATOR_ROLE\\\");\\n\\n    event RoleSet(string indexed role, Permission indexed permission);\\n\\n    // The operator used to combine the validators accordingly to the the users wish\\n    enum Operator { \\n        OR, \\n        AND,\\n        NAND,\\n        NOR\\n    }\\n   \\n    // A permission consists out of a logical operator that defines how the set of validators should get interpreted\\n    struct Permission {\\n        Operator operator;\\n        PermissionValidator[] validators; // ERC20Validator, NFTValidator, e.t.c\\n        bytes[] data;\\n    }\\n\\n    // The different permissions to define depending on the type of governance primitive\\n    struct GovernancePrimitivePermissions {\\n        string start;\\n        string execute;\\n        string halt;\\n        string forward;\\n        string stop;\\n        string vote;\\n    }\\n\\n    mapping(string => Permission) public permissions;\\n\\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _dao The DAO contract of the current DAO\\n    function initialize(IDAO _dao) public override initializer {\\n        Component.initialize(_dao);\\n    }\\n\\n    /// @notice Adds a new role based on the permission validations passed.\\n    /// @dev Here you simple pass the role name and the permission struct with his logical operator and the validators set.\\n    /// @param role The name of the role as string\\n    /// @param permission The permission struct to define the permission validation rules\\n    function setRole(string calldata role, Permission calldata permission) external authP(PERMISSIONS_SET_ROLE) {\\n        permissions[role] = permission; // Group1 => [AND, ERC20Validator]\\n\\n        emit RoleSet(role, permission);\\n    }\\n\\n    // TODO: This method is not gas efficient\\n    /// @notice Checks the permissions of the caller.\\n    /// @dev Based on the stored permission struct does it go through all validators and checks the validity of the caller.\\n    /// @param role The name of the role as string\\n    /// @return valid The validity check result returned as bool\\n    function checkPermission(string calldata role) external view returns (bool valid) {\\n        PermissionValidator[] memory validators = permissions[role].validators;\\n        Operator operator = permissions[role].operator;\\n        bytes[] memory data = permissions[role].data;\\n\\n        uint256 validatorsLength = validators.length;\\n        uint8 succeeds = 0;\\n\\n        for (uint256 i = 0; i < validatorsLength; i++) {\\n            PermissionValidator validator = validators[i];\\n            if(PermissionValidator(validator).isValid(msg.sender, data[i])) {\\n                succeeds += 1;\\n            }\\n        }\\n\\n        if(operator == Operator.AND && succeeds == validatorsLength) {\\n            return true;\\n        }\\n\\n        if(operator == Operator.OR && succeeds >= 1) {\\n            return true;\\n        }\\n\\n        if(operator == Operator.NAND && succeeds < validatorsLength) {\\n            return true;\\n        }\\n\\n        if(operator == Operator.NOR && succeeds == 0) {\\n           return true;\\n        }\\n\\n        return false;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd29c3dd5e28174e002b3747bbf6c82564d439fa475c1c25702f630f02241e81e\",\"license\":\"MIT\"},\"contracts/src/processes/Processes.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../lib/governance-primitives/GovernancePrimitive.sol\\\";\\nimport \\\"../permissions/Permissions.sol\\\";\\nimport \\\"../executor/Executor.sol\\\";\\nimport \\\"../../lib/component/IDAO.sol\\\";\\n\\n/// @title The processes contract defining the flow of every interaction with the DAO\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract is a central point of the Aragon DAO framework and handles all the processes and stores the different process types with his governance primitives a DAO can have.\\n/// @dev A list of process types are stored here pluss it validates if the passed actions in a proposal are valid.\\ncontract Processes is UpgradableComponent { \\n\\n    bytes32 public constant PROCESSES_START_ROLE = keccak256(\\\"PROCESSES_START_ROLE\\\");\\n    bytes32 public constant PROCESSES_SET_ROLE = keccak256(\\\"PROCESSES_SET_ROLE\\\");\\n\\n    event ProcessStarted(GovernancePrimitive.Proposal indexed proposal, uint256 indexed executionId);\\n    event ProcessSet(string indexed name, Process indexed process);\\n\\n    struct Process {\\n        GovernancePrimitive governancePrimitive; // The primitve to execute for example a simple yes/no voting.\\n        Permissions.GovernancePrimitivePermissions permissions; // A struct with all permission hashes for any possible governance primitive permission.\\n        AllowedActions[] allowedActions; // Allowed actions this process can call\\n        bytes metadata; // The IPFS hash that points to a JSON file that describes this specific governance process.\\n    }\\n\\n    struct AllowedActions {\\n        address to; // Allowed contract to call\\n        bytes4[] methods; // The method signatures of the allowed method calls\\n    }\\n    \\n    mapping(string => Process) public processes; // All existing governance processes in this DAO\\n\\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _dao The DAO contract of the current DAO\\n    function initialize(IDAO _dao) public override initializer {\\n        Component.initialize(_dao);\\n    }\\n\\n    /// @notice Starts the given process resp. primitive by the given proposal\\n    /// @dev Checks the passed actions, gets the governance primitive of this process, and starts it\\n    /// @param proposal The proposal for execution submitted by the user.\\n    /// @return process The Process struct stored\\n    /// @return executionId The id of the newly created execution.\\n    function start(GovernancePrimitive.Proposal calldata proposal) \\n        external \\n        authP(PROCESSES_START_ROLE) \\n        returns (Process memory process, uint256 executionId) \\n    {\\n        process = processes[proposal.processName];\\n        require(checkActions(proposal.actions, process.allowedActions), \\\"Not allowed action!\\\");\\n\\n        executionId = GovernancePrimitive(process.governancePrimitive).start(process, proposal);\\n        \\n        emit ProcessStarted(proposal, executionId);\\n\\n        return (process, executionId);\\n    }\\n\\n    /// @notice Adds a new process to the DAO\\n    /// @param name The name of the new process\\n    /// @param process The process struct defining the new DAO process\\n    function setProcess(string calldata name, Process calldata process) \\n        public \\n        authP(PROCESSES_SET_ROLE) \\n    {\\n        processes[name] = process;\\n\\n        emit ProcessSet(name, process);\\n    }\\n\\n    // TODO: Optimize this!\\n    /// @notice Checks if the passed actions are allowed to be executed with the selected process\\n    /// @dev Checks the passed actions, gets the governance primitive of this process, and starts it\\n    /// @param actions The proposal for execution submitted by the user.\\n    /// @param allowedActions The proposal for execution submitted by the user.\\n    /// @return valid Returns the validity bool value after validating the actions\\n    function checkActions(Executor.Action[] calldata actions, AllowedActions[] memory allowedActions) \\n        internal pure \\n        returns (bool valid) \\n    {\\n        uint256 actionsLength = actions.length;\\n        uint256 allowedActionsLength = allowedActions.length;\\n        bool allowed = false;\\n\\n        for (uint256 i = 0; i < actionsLength; i++) { // FOR EVERY PROPOSAL ACTION\\n            Executor.Action calldata action = actions[i];\\n            for (uint256 k = 0; k < allowedActionsLength; k++) { // FOR EVERY ALLOWED CONTRACT\\n                AllowedActions memory allowedAction = allowedActions[k];\\n                if (action.to == allowedAction.to) { // CONTRACT MATCHED\\n                    uint256 methodsLength = allowedAction.methods.length;\\n                    for (uint256 y = 0; y < methodsLength; y++) { // CHECK FOR EVERY ALLOWD METHOD OF A CONTRACT\\n                        if (bytes4(action.data[:4]) == allowedAction.methods[y]) { // METHOD FOUND STOP SEARCHING\\n                            allowed = true;\\n                            break;\\n                        } else { // METHOD NOT FOUND\\n                            allowed = false;\\n                        }\\n                    }\\n\\n                    if (allowed) {\\n                        break;\\n                    }\\n                }\\n            }\\n            \\n            if (!allowed) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xef4dfbf9a7358aaf2407c3a5d0ee2584547f88f40fe274f24bf3875c4b2462c8\",\"license\":\"MIT\"},\"contracts/src/registry/Registry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../DAO.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"../../lib/governance-primitives/voting/VotingGovernancePrimitive.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\n\\n/// @title Register your unique DAO name\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract provides the possiblity to register a DAO by a unique name.\\ncontract Registry {\\n    event NewDAO(\\n        string indexed name, \\n        address indexed creator,\\n        DAO indexed dao,\\n        address token,\\n        VotingGovernancePrimitive voting,\\n        Vault vault,\\n        Executor executor,\\n        Processes processes,\\n        Permissions permissions\\n    );\\n\\n    mapping(string => DAO) public daos;\\n\\n    /// @notice Registers a DAO by his name\\n    /// @dev A name is unique within the Aragon DAO framework and can get stored here\\n    /// @param name The name of the DAO\\n    /// @param dao The address of the DAO contract\\n    function register(\\n        string calldata name, \\n        address sender,\\n        DAO dao,\\n        address token,\\n        VotingGovernancePrimitive voting,\\n        Vault vault,\\n        Executor executor,\\n        Processes processes,\\n        Permissions permissions\\n        ) external {\\n        require(daos[name] == DAO(address(0)), \\\"Name in use\\\");\\n\\n        daos[name] = dao;\\n        \\n        emit NewDAO(\\n            name, \\n            sender,\\n            dao,\\n            token,\\n            voting,\\n            vault,\\n            executor,\\n            processes,\\n            permissions\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0949b1ac4be308bf759d29f17b49bcdd856ed3150dcf73749fc595ff33b0a70e\",\"license\":\"MIT\"},\"contracts/src/tokens/GovernanceERC20.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\n\\ncontract GovernanceERC20 is ERC20VotesUpgradeable {\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    function initialize(string calldata name, string calldata symbol) external initializer {\\n        __ERC20_init(name, symbol);\\n        __ERC20Permit_init(name);\\n    }\\n\\n    // The functions below are overrides required by Solidity.\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal override {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount) internal override {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal override{\\n        super._burn(account, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x1042054847364c210b2e82b5d4d6c3e2ea76b946b6f3b3a77e520cdbbd9acff0\",\"license\":\"MIT\"},\"contracts/src/tokens/GovernanceWrappedERC20.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20WrapperUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract GovernanceWrappedERC20 is ERC20VotesUpgradeable, ERC20WrapperUpgradeable {\\n    \\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {}\\n\\n    function initialize(IERC20Upgradeable token, string calldata name, string calldata symbol) external initializer {\\n        __ERC20_init(name, symbol);\\n        __ERC20Permit_init(name);\\n        __ERC20Wrapper_init(token);\\n    }\\n    \\n    // The functions below are overrides required by Solidity.\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal override(ERC20VotesUpgradeable, ERC20Upgradeable) {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount) internal override(ERC20VotesUpgradeable, ERC20Upgradeable) {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal override(ERC20VotesUpgradeable, ERC20Upgradeable){\\n        super._burn(account, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x94b5f735132c903beb25f2e805b0b93ff154b215d9283b79fe4238ea1bd8a8fc\",\"license\":\"MIT\"},\"contracts/src/vault/Vault.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../../lib/component/IDAO.sol\\\";\\nimport \\\"../../lib/component/UpgradableComponent.sol\\\";\\n\\ncontract Vault is UpgradableComponent, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ETH = address(0);\\n\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \\\"VAULT_DEPOSIT_VALUE_ZERO\\\";\\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \\\"VAULT_TRANSFER_VALUE_ZERO\\\";\\n    string private constant ERROR_SEND_REVERTED = \\\"VAULT_SEND_REVERTED\\\";\\n    string private constant ERROR_VALUE_MISMATCH = \\\"VAULT_VALUE_MISMATCH\\\";\\n    \\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount, string reason);\\n    event VaultETHDeposit(address indexed sender, uint256 amount);\\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount, string reason);\\n    \\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _dao The DAO contract of the current DAO\\n    function initialize(IDAO _dao) public override initializer {\\n        Component.initialize(_dao);\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**  \\n    * @dev  Inside receive, its own eth deposit event gets used to somehow still allow\\n        send/transfer from caller contracts. Still, with this solution, access list\\n        feature is required to make it work. Using the VaultDeposit event, send/transfer\\n        won't even work with access list as adding 2 more argument adds 1000 more gas.\\n        NOTE: This mightn't work like this in the future as gas costs are about to change.\\n        use `send/transfer` from other contracts at your own risk.  \\n    */\\n    receive() external payable {\\n        emit VaultETHDeposit(msg.sender, msg.value);\\n    }\\n    \\n    // TODO: we might need to bring some checks for deposit so that it can't be called without proxy\\n    // this will make sure that functions don't get called on logic contract and end up there forever.\\n    /**\\n    *  @notice allows to deposit ether or token into this vault.\\n    *  @param _token token address(0x..00 in case of ETH)\\n    *  @param _value how much to deposit\\n    *  @param _description reason for the deposit\\n     */\\n    function deposit(address _token, uint256 _value, string calldata _description) external payable {\\n        _deposit(_token, _value, _description);\\n    }\\n    \\n    \\n    \\n    /**\\n    *  @notice allows to transfer ether or token from this vault.\\n    *  @dev nonReentrant is an extra added safety feature even though it might not be necessary. It actually comes in help\\n            when somehow malicious contract gets a TRANSFER_ROLE and tries to drain the contract balance.\\n    *  @param _token token address(0x..00 in case of ETH)\\n    *  @param _to who to transfer to.\\n    *  @param _value how much to transfer\\n    *  @param _description reason for the transfer\\n     */\\n    function transfer(address _token, address _to, uint256 _value, string calldata _description) external nonReentrant authP(TRANSFER_ROLE) {\\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool ok, ) = _to.call{value: _value}(\\\"\\\");\\n            require(ok, ERROR_SEND_REVERTED);\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _value);\\n        }\\n\\n        emit VaultTransfer(_token, _to, _value, _description);\\n    }\\n\\n    /**\\n    * @notice get a Vault balance \\n    * @param _token on which token to get a balance. (0x.000 in case of ETH)\\n    * @return balance of the vault on the token address\\n    */\\n    function balance(address _token) public view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(_token).balanceOf(address(this));\\n        }\\n    }\\n\\n    /// @dev internal function to handle deposit into the Vault.\\n    function _deposit(address _token, uint256 _value, string calldata _description) internal {\\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\\n        } else {\\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _value);\\n        }\\n\\n        emit VaultDeposit(_token, msg.sender, _value, _description);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xf9aaca61e47932b575d2e620d69fac2496e94ccf7ec68c36d7e8b9ccdbefa217\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200c9523803806200c952833981016040819052620000359162000141565b6001600160601b0319606084811b821660e05283811b82166101005282901b1661012052604051620000679062000117565b604051809103906000f08015801562000084573d6000803e3d6000fd5b5060601b6001600160601b03191660a052604051620000a39062000125565b604051809103906000f080158015620000c0573d6000803e3d6000fd5b5060601b6001600160601b03191660c052604051620000df9062000133565b604051809103906000f080158015620000fc573d6000803e3d6000fd5b5060601b6001600160601b03191660805250620001ae915050565b6159b48062001eb083390190565b611afa806200786483390190565b6135f4806200935e83390190565b6000806000606084860312156200015757600080fd5b8351620001648162000195565b6020850151909350620001778162000195565b60408501519092506200018a8162000195565b809150509250925092565b6001600160a01b0381168114620001ab57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c611c78620002386000396000818160ab01526103f101526000818161016701526101e40152600081816101170152610f3101526000818161018f015261036401526000818160ef01526102ba01526000818161013f015261027b0152611c786000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80637b10399911620000625780637b1039991462000111578063d9f8bd231462000139578063e77772fe1462000161578063eeab4955146200018957600080fd5b80631adbbfd8146200008c5780633d8df66714620000a557806363bf713514620000e9575b600080fd5b620000a36200009d36600462001107565b620001b1565b005b620000cd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b620000cd7f000000000000000000000000000000000000000000000000000000000000000081565b620000cd7f000000000000000000000000000000000000000000000000000000000000000081565b620000cd7f000000000000000000000000000000000000000000000000000000000000000081565b620000cd7f000000000000000000000000000000000000000000000000000000000000000081565b620000cd7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fe38412440000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e3841244906200021b90869060040162001334565b602060405180830381600087803b1580156200023657600080fd5b505af11580156200024b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000271919062001072565b90506000620002b07f00000000000000000000000000000000000000000000000000000000000000006040518060200160405280600081525062000fd2565b90506000620003457f000000000000000000000000000000000000000000000000000000000000000063fc2017f060e01b848688604051602401620002f8939291906200129e565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915262000fd2565b6040516001600160a01b0384166024820152909150600090620003af907f0000000000000000000000000000000000000000000000000000000000000000907fc4d66de80000000000000000000000000000000000000000000000000000000090604401620002f8565b6040517f8ba8869c0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919250600091829182917f00000000000000000000000000000000000000000000000000000000000000001690638ba8869c90602401606060405180830381600087803b1580156200043657600080fd5b505af11580156200044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000471919062001099565b925092509250856001600160a01b031663b6989ca38c8c868686306040518763ffffffff1660e01b8152600401620004af9695949392919062001255565b600060405180830381600087803b158015620004ca57600080fd5b505af1158015620004df573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c6001600160a01b0383846001600160a01b031663b908afa86040518163ffffffff1660e01b815260040160206040518083038186803b1580156200053557600080fd5b505afa1580156200054a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005709190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015620005c057600080fd5b505af1158015620005d5573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8583876001600160a01b031663206b60f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200062457600080fd5b505afa15801562000639573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200065f9190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015620006af57600080fd5b505af1158015620006c4573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8388856001600160a01b0316638050aef06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200071357600080fd5b505afa15801562000728573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200074e9190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156200079e57600080fd5b505af1158015620007b3573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8488866001600160a01b0316633e235cdf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200080257600080fd5b505afa15801562000817573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200083d9190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156200088d57600080fd5b505af1158015620008a2573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8488866001600160a01b03166373dea80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620008f157600080fd5b505afa15801562000906573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200092c9190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156200097c57600080fd5b505af115801562000991573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8783896001600160a01b03166375cbdae06040518163ffffffff1660e01b815260040160206040518083038186803b158015620009e057600080fd5b505afa158015620009f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a1b9190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801562000a6b57600080fd5b505af115801562000a80573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8287846001600160a01b0316632430e58c6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000acf57600080fd5b505afa15801562000ae4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0a9190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801562000b5a57600080fd5b505af115801562000b6f573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8685886001600160a01b03166397c4d9726040518163ffffffff1660e01b815260040160206040518083038186803b15801562000bbe57600080fd5b505afa15801562000bd3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bf99190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801562000c4957600080fd5b505af115801562000c5e573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8688886001600160a01b031663495b77f26040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cad57600080fd5b505afa15801562000cc2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ce89190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801562000d3857600080fd5b505af115801562000d4d573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8683886001600160a01b03166362de7e5a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000d9c57600080fd5b505afa15801562000db1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dd79190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801562000e2757600080fd5b505af115801562000e3c573d6000803e3d6000fd5b50505050856001600160a01b031663d68bad2c8683886001600160a01b0316633c624c756040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e8b57600080fd5b505afa15801562000ea0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ec69190620010ed565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801562000f1657600080fd5b505af115801562000f2b573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc7736aa8e8e338a8c8b8b898c8c6040518b63ffffffff1660e01b815260040162000f8f9a99989796959493929190620012ca565b600060405180830381600087803b15801562000faa57600080fd5b505af115801562000fbf573d6000803e3d6000fd5b5050505050505050505050505050505050565b600080838360405162000fe59062001018565b62000ff2929190620011ec565b604051809103906000f0801580156200100f573d6000803e3d6000fd5b50949350505050565b610810806200143383390190565b60008083601f8401126200103957600080fd5b50813567ffffffffffffffff8111156200105257600080fd5b6020830191508360208285010111156200106b57600080fd5b9250929050565b6000602082840312156200108557600080fd5b8151620010928162001419565b9392505050565b600080600060608486031215620010af57600080fd5b8351620010bc8162001419565b6020850151909350620010cf8162001419565b6040850151909250620010e28162001419565b809150509250925092565b6000602082840312156200110057600080fd5b5051919050565b60008060008060008060c087890312156200112157600080fd5b863567ffffffffffffffff808211156200113a57600080fd5b620011488a838b0162001026565b909850965060208901359150808211156200116257600080fd5b620011708a838b0162001026565b909650945060408901359150808211156200118a57600080fd5b5087016060818a0312156200119e57600080fd5b915060c08701881015620011b157600080fd5b6060870190509295509295509295565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6001600160a01b038316815260006020604081840152835180604085015260005b818110156200122b578581018301518582016060015282016200120d565b818111156200123e576000606083870101525b50601f01601f191692909201606001949350505050565b60a0815260006200126b60a08301888a620011c1565b6001600160a01b039687166020840152948616604083015250918416606083015290921660809092019190915292915050565b6001600160a01b0384811682528316602082015260a08101606083604084013760008152949350505050565b6000610120808352620012e18184018d8f620011c1565b6001600160a01b039b8c166020850152998b16604084015250509588166060870152938716608086015291861660a0850152851660c0840152841660e08301529092166101009092019190915292915050565b6020815260008235620013478162001419565b6001600160a01b038116602084015250620013666020840184620013b2565b606060408501526200137d608085018284620011c1565b9150506200138f6040850185620013b2565b601f19858403016060860152620013a8838284620011c1565b9695505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112620013e857600080fd5b830160208101925035905067ffffffffffffffff8111156200140957600080fd5b8036038313156200106b57600080fd5b6001600160a01b03811681146200142f57600080fd5b5056fe6080604052604051610810380380610810833981016040819052610022916102f5565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610412565b6000805160206107c98339815191521461006957610069610463565b6100758282600061007c565b505061048f565b610085836100b2565b6000825111806100925750805b156100ad576100ab83836100f260201b6100291760201c565b505b505050565b6100bb8161011e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061011783836040518060600160405280602781526020016107e9602791396101de565b9392505050565b610131816102b360201b6100551760201c565b6101985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101bd6000805160206107c983398151915260001b6102b960201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060833b61023d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018f565b600080856001600160a01b03168560405161025891906103c3565b600060405180830381855af49150503d8060008114610293576040519150601f19603f3d011682016040523d82523d6000602084013e610298565b606091505b5090925090506102a98282866102bc565b9695505050505050565b3b151590565b90565b606083156102cb575081610117565b8251156102db5782518084602001fd5b8160405162461bcd60e51b815260040161018f91906103df565b6000806040838503121561030857600080fd5b82516001600160a01b038116811461031f57600080fd5b60208401519092506001600160401b038082111561033c57600080fd5b818501915085601f83011261035057600080fd5b81518181111561036257610362610479565b604051601f8201601f19908116603f0116810190838211818310171561038a5761038a610479565b816040528281528860208487010111156103a357600080fd5b6103b4836020830160208801610437565b80955050505050509250929050565b600082516103d5818460208701610437565b9190910192915050565b60208152600082518060208401526103fe816040850160208701610437565b601f01601f19169190910160400192915050565b60008282101561043257634e487b7160e01b600052601160045260246000fd5b500390565b60005b8381101561045257818101518382015260200161043a565b838111156100ab5750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61032b8061049e6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b6100a3565b565b606061004e83836040518060600160405280602781526020016102cf602791396100c7565b9392505050565b3b151590565b90565b600061009e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100c2573d6000f35b3d6000fd5b6060833b61015c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101849190610231565b600060405180830381855af49150503d80600081146101bf576040519150601f19603f3d011682016040523d82523d6000602084013e6101c4565b606091505b50915091506101d48282866101de565b9695505050505050565b606083156101ed57508161004e565b8251156101fd5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610153919061024d565b6000825161024381846020870161029e565b9190910192915050565b602081526000825180602084015261026c81604085016020870161029e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60005b838110156102b95781810151838201526020016102a1565b838111156102c8576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204febecbe50d9e51146637628814f1e102b293f2540fb0988d91815075752147e64736f6c63430008060033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122029b0e00bb503cad06fbc9ee3eae2a3be56608262f04949d931453725dd31c65064736f6c6343000806003360a06040523060601b6080523480156200001857600080fd5b50600354610100900460ff168062000033575060035460ff16155b6200009b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600354610100900460ff16158015620000be576003805461ffff19166101011790555b8015620000d1576003805461ff00191690555b5060805160601c6158ae62000106600039600081816105720152818161060d015281816107a2015261083801526158ae6000f3fe6080604052600436106101805760003560e01c8063b88b82ba116100d6578063de4f63471161007f578063fc157cb411610059578063fc157cb41461050b578063fc2017f014610527578063fe0d94c11461054757600080fd5b8063de4f63471461049c578063fad167ab146104b2578063fc0c546a146104d357600080fd5b8063c4d66de8116100b0578063c4d66de8146103f5578063cdb2867b1461043f578063dc474b1a1461046f57600080fd5b8063b88b82ba14610360578063b908afa814610380578063bcf93dd6146103b457600080fd5b80635a55c1f0116101385780636929279e116101125780636929279e146102ec5780637c1d0b871461030c57806397c4d9721461032c57600080fd5b80635a55c1f0146102625780635eb243321461029857806362de7e5a146102b857600080fd5b8063495b77f211610169578063495b77f2146101ee5780634b12311c146102225780634f1ef2861461024f57600080fd5b80633659cfe6146101855780633c624c75146101a7575b600080fd5b34801561019157600080fd5b506101a56101a036600461414e565b610567565b005b3480156101b357600080fd5b506101db7fad15e7261800b4bb73f1b69d3864565ffb1fd00cb93cf14fe48da8f1f2149f3981565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b506101db7f10ea533fb3f353626ce96f5cd74c11a7c44d5e50bf74c880ccc6af91ed43dcec81565b34801561022e57600080fd5b5061024261023d3660046143da565b61070a565b6040516101e59190614bc9565b6101a561025d36600461416b565b610797565b34801561026e57600080fd5b5061028261027d3660046143a8565b610926565b6040516101e59a99989796959493929190614ac2565b3480156102a457600080fd5b506101a56102b336600461447b565b610b33565b3480156102c457600080fd5b506101db7fda3972983e62bdf826c4b807c4c9c2b8a941e1f83dfa76d53d6aeac11e1be65081565b3480156102f857600080fd5b506101db610307366004614344565b610cfc565b34801561031857600080fd5b506101a561032736600461447b565b6117da565b34801561033857600080fd5b506101db7f0dd1a2559ec1ba5739c3e5a8976d1ea74abd2520c1fcc1cf5c99cd6a6b700ab381565b34801561036c57600080fd5b506101a561037b3660046143ff565b6119e8565b34801561038c57600080fd5b506101db7f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba10150881565b3480156103c057600080fd5b506006546103dc90600160801b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101e5565b34801561040157600080fd5b506101a561041036600461414e565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b34801561044b57600080fd5b5061045f61045a3660046143da565b612483565b60405190151581526020016101e5565b34801561047b57600080fd5b506006546103dc9068010000000000000000900467ffffffffffffffff1681565b3480156104a857600080fd5b506101db60055481565b3480156104be57600080fd5b506006546103dc9067ffffffffffffffff1681565b3480156104df57600080fd5b506007546104f3906001600160a01b031681565b6040516001600160a01b0390911681526020016101e5565b34801561051757600080fd5b506103dc670de0b6b3a764000081565b34801561053357600080fd5b506101a5610542366004614254565b6124f2565b34801561055357600080fd5b506101a56105623660046143a8565b612818565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561060b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106667f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106e25760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610602565b6106eb81613383565b6040805160008082526020820190925261070791839190613468565b50565b60008260015481106040518060400160405280601281526020017f4552524f525f4e4f5f455845435554494f4e0000000000000000000000000000815250906107665760405162461bcd60e51b81526004016106029190614bf7565b50505060009182526004602081815260408085206001600160a01b0394909416855292909101905290205460ff1690565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108365760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610602565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461090d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610602565b61091682613383565b61092282826001613468565b5050565b600080600080600080600080600060608a60015481106040518060400160405280601281526020017f4552524f525f4e4f5f455845435554494f4e0000000000000000000000000000815250906109905760405162461bcd60e51b81526004016106029190614bf7565b5060008c81526004602052604090206109a9818e61362c565b9b506109b48d613686565b8154600183015460028401546003850154939e5067ffffffffffffffff8084169e5068010000000000000000840481169d50600160801b840481169c50600160c01b9093049092169950975095509350610a198d600090815260026020526040902090565b600b0180546040805160208084028201810190925282815292919060009084015b82821015610b1e576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191610a8d9061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab99061522e565b8015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b50505050508152505081526020019060010190610a3a565b50505050925050509193959799509193959799565b60008054604051637ef7c88360e11b81527fad15e7261800b4bb73f1b69d3864565ffb1fd00cb93cf14fe48da8f1f2149f39926001600160a01b039092169163fdef910691610b8c913091339187913690600401614a8f565b602060405180830381600087803b158015610ba657600080fd5b505af1158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde91906141fe565b610c185760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b6044820152606401610602565b60065460408051808201909152601981527f564f54494e475f4348414e47455f51554f52554d5f504354530000000000000060208201529067ffffffffffffffff9081169084161115610c7e5760405162461bcd60e51b81526004016106029190614bf7565b50600680547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff8516908102919091179091556040519081527f3172f2e9273c729c2a47cc8bf7e7f18506e3e3035126d562602bd2155bc78a50906020015b60405180910390a15050565b60008054604051637ef7c88360e11b81527f0dd1a2559ec1ba5739c3e5a8976d1ea74abd2520c1fcc1cf5c99cd6a6b700ab3916001600160a01b03169063fdef910690610d559030903390869088903690600401614a8f565b602060405180830381600087803b158015610d6f57600080fd5b505af1158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da791906141fe565b610de15760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b6044820152606401610602565b6000546001600160a01b031663721da993610dff6020870187614d8f565b610e099080614ce0565b6040518363ffffffff1660e01b8152600401610e26929190614be3565b60206040518083038186803b158015610e3e57600080fd5b505afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7691906141fe565b6040518060400160405280601a81526020017f4552524f525f4e4f545f414c4c4f5745445f544f5f535441525400000000000081525090610eca5760405162461bcd60e51b81526004016106029190614bf7565b5060018054906000610edb83615263565b90915550506001805460008181526002602052604090209081559085908201610f048282615356565b50849050600a8201610f168282615540565b5050600e8101805460ff19169055604080516080808201835283548252825190810183526001840180546001600160a01b03168252835160c0810190945260028501805460009587946020808801959194919390850192919082908290610f7c9061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa89061522e565b8015610ff55780601f10610fca57610100808354040283529160200191610ff5565b820191906000526020600020905b815481529060010190602001808311610fd857829003601f168201915b5050505050815260200160018201805461100e9061522e565b80601f016020809104026020016040519081016040528092919081815260200182805461103a9061522e565b80156110875780601f1061105c57610100808354040283529160200191611087565b820191906000526020600020905b81548152906001019060200180831161106a57829003601f168201915b505050505081526020016002820180546110a09061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546110cc9061522e565b80156111195780601f106110ee57610100808354040283529160200191611119565b820191906000526020600020905b8154815290600101906020018083116110fc57829003601f168201915b505050505081526020016003820180546111329061522e565b80601f016020809104026020016040519081016040528092919081815260200182805461115e9061522e565b80156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b505050505081526020016004820180546111c49061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546111f09061522e565b801561123d5780601f106112125761010080835404028352916020019161123d565b820191906000526020600020905b81548152906001019060200180831161122057829003601f168201915b505050505081526020016005820180546112569061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546112829061522e565b80156112cf5780601f106112a4576101008083540402835291602001916112cf565b820191906000526020600020905b8154815290600101906020018083116112b257829003601f168201915b505050505081525050815260200160078201805480602002602001604051908101604052809291908181526020016000905b828210156113d85760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156113c057602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161136d5790505b50505050508152505081526020019060010190611301565b5050505081526020016008820180546113f09061522e565b80601f016020809104026020016040519081016040528092919081815260200182805461141c9061522e565b80156114695780601f1061143e57610100808354040283529160200191611469565b820191906000526020600020905b81548152906001019060200180831161144c57829003601f168201915b5050505050815250508152602001600a82016040518060800160405290816000820180546114969061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546114c29061522e565b801561150f5780601f106114e45761010080835404028352916020019161150f565b820191906000526020600020905b8154815290600101906020018083116114f257829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015611621576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916115909061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546115bc9061522e565b80156116095780601f106115de57610100808354040283529160200191611609565b820191906000526020600020905b8154815290600101906020018083116115ec57829003601f168201915b5050505050815250508152602001906001019061153d565b5050505081526020016002820180546116399061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546116659061522e565b80156116b25780601f10611687576101008083540402835291602001916116b2565b820191906000526020600020905b81548152906001019060200180831161169557829003601f168201915b505050505081526020016003820180546116cb9061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546116f79061522e565b80156117445780601f1061171957610100808354040283529160200191611744565b820191906000526020600020905b81548152906001019060200180831161172757829003601f168201915b505050919092525050508152600e82015460209091019060ff16600381111561176f5761176f615294565b600381111561178057611780615294565b905250905061178e816136b7565b838260405161179d91906147eb565b604051908190038120907f2f8139148d9020cbfdbdecc59d0cabb0f972109b744fc9eb0d41819a5de692ca90600090a35050600154949350505050565b60008054604051637ef7c88360e11b81527fda3972983e62bdf826c4b807c4c9c2b8a941e1f83dfa76d53d6aeac11e1be650926001600160a01b039092169163fdef910691611833913091339187913690600401614a8f565b602060405180830381600087803b15801561184d57600080fd5b505af1158015611861573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188591906141fe565b6118bf5760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b6044820152606401610602565b60065460408051808201909152601a81527f564f54494e475f4348414e47455f535550504f52545f5043545300000000000060208201529067ffffffffffffffff808516680100000000000000009092041611156119305760405162461bcd60e51b81526004016106029190614bf7565b5060408051808201909152601a81527f564f54494e475f4348414e47455f535550505f544f4f5f4249470000000000006020820152670de0b6b3a764000067ffffffffffffffff8416106119975760405162461bcd60e51b81526004016106029190614bf7565b506006805467ffffffffffffffff191667ffffffffffffffff84169081179091556040519081527f903b617f7f36eb047a29b89d1bf7885fdae31d250c3320fccf11d045c11b396e90602001610cf0565b8260015481106040518060400160405280601281526020017f4552524f525f4e4f5f455845435554494f4e000000000000000000000000000081525090611a425760405162461bcd60e51b81526004016106029190614bf7565b506000848152600260205260408120604080516080808201835283548252825190810183526001840180546001600160a01b03168252835160c08101909452600285018054939594602080880195908501929082908290611aa29061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054611ace9061522e565b8015611b1b5780601f10611af057610100808354040283529160200191611b1b565b820191906000526020600020905b815481529060010190602001808311611afe57829003601f168201915b50505050508152602001600182018054611b349061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054611b609061522e565b8015611bad5780601f10611b8257610100808354040283529160200191611bad565b820191906000526020600020905b815481529060010190602001808311611b9057829003601f168201915b50505050508152602001600282018054611bc69061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf29061522e565b8015611c3f5780601f10611c1457610100808354040283529160200191611c3f565b820191906000526020600020905b815481529060010190602001808311611c2257829003601f168201915b50505050508152602001600382018054611c589061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c849061522e565b8015611cd15780601f10611ca657610100808354040283529160200191611cd1565b820191906000526020600020905b815481529060010190602001808311611cb457829003601f168201915b50505050508152602001600482018054611cea9061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054611d169061522e565b8015611d635780601f10611d3857610100808354040283529160200191611d63565b820191906000526020600020905b815481529060010190602001808311611d4657829003601f168201915b50505050508152602001600582018054611d7c9061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054611da89061522e565b8015611df55780601f10611dca57610100808354040283529160200191611df5565b820191906000526020600020905b815481529060010190602001808311611dd857829003601f168201915b505050505081525050815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015611efe5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015611ee657602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411611e935790505b50505050508152505081526020019060010190611e27565b505050508152602001600882018054611f169061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054611f429061522e565b8015611f8f5780601f10611f6457610100808354040283529160200191611f8f565b820191906000526020600020905b815481529060010190602001808311611f7257829003601f168201915b5050505050815250508152602001600a8201604051806080016040529081600082018054611fbc9061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054611fe89061522e565b80156120355780601f1061200a57610100808354040283529160200191612035565b820191906000526020600020905b81548152906001019060200180831161201857829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015612147576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916120b69061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546120e29061522e565b801561212f5780601f106121045761010080835404028352916020019161212f565b820191906000526020600020905b81548152906001019060200180831161211257829003601f168201915b50505050508152505081526020019060010190612063565b50505050815260200160028201805461215f9061522e565b80601f016020809104026020016040519081016040528092919081815260200182805461218b9061522e565b80156121d85780601f106121ad576101008083540402835291602001916121d8565b820191906000526020600020905b8154815290600101906020018083116121bb57829003601f168201915b505050505081526020016003820180546121f19061522e565b80601f016020809104026020016040519081016040528092919081815260200182805461221d9061522e565b801561226a5780601f1061223f5761010080835404028352916020019161226a565b820191906000526020600020905b81548152906001019060200180831161224d57829003601f168201915b505050919092525050508152600e82015460209091019060ff16600381111561229557612295615294565b60038111156122a6576122a6615294565b90525090506000816060015160038111156122c3576122c3615294565b146040518060400160405280601b81526020017f4552524f525f455845435554494f4e5f53544154455f57524f4e470000000000815250906123185760405162461bcd60e51b81526004016106029190614bf7565b50600054602080830151015160a001516040517f721da9930000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163721da9939161236c91600401614bf7565b60206040518083038186803b15801561238457600080fd5b505afa158015612398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bc91906141fe565b6040518060400160405280601b81526020017f4552524f525f455845435554494f4e5f53544154455f57524f4e470000000000815250906124105760405162461bcd60e51b81526004016106029190614bf7565b5061241c85858561393c565b838360405161242c9291906146ad565b60405180910390208160405161244291906146d9565b604051908190038120878252907f06e89ce73a1bc6704ed82216000e8a90716f2655dcaa98a517e60a7ccc814d3e9060200160405180910390a35050505050565b60008260015481106040518060400160405280601281526020017f4552524f525f4e4f5f455845435554494f4e0000000000000000000000000000815250906124df5760405162461bcd60e51b81526004016106029190614bf7565b506124ea84846139ba565b949350505050565b600354610100900460ff168061250b575060035460ff16155b61257d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610602565b600354610100900460ff161580156125bc57600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790556125f4604083016020840161447b565b67ffffffffffffffff1661260b602084018461447b565b67ffffffffffffffff1611156040518060400160405280601081526020017f564f54494e475f494e49545f50435453000000000000000000000000000000008152509061266b5760405162461bcd60e51b81526004016106029190614bf7565b50670de0b6b3a7640000612685604084016020850161447b565b67ffffffffffffffff16106040518060400160405280601b81526020017f564f54494e475f494e49545f535550504f52545f544f4f5f4249470000000000815250906126e45760405162461bcd60e51b81526004016106029190614bf7565b506126f2602083018361447b565b6006805467ffffffffffffffff9290921668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff909216919091179055612748604083016020840161447b565b6006805467ffffffffffffffff191667ffffffffffffffff9290921691909117905561277a606083016040840161447b565b6006805467ffffffffffffffff92909216600160801b027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff9092169190911790556000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055801561281257600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050565b8060015481106040518060400160405280601281526020017f4552524f525f4e4f5f455845435554494f4e0000000000000000000000000000815250906128725760405162461bcd60e51b81526004016106029190614bf7565b5060008054604051637ef7c88360e11b81527f10ea533fb3f353626ce96f5cd74c11a7c44d5e50bf74c880ccc6af91ed43dcec926001600160a01b039092169163fdef9106916128cc913091339187913690600401614a8f565b602060405180830381600087803b1580156128e657600080fd5b505af11580156128fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291e91906141fe565b6129585760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b6044820152606401610602565b600083815260026020526040812090506000600e82015460ff16600381111561298357612983615294565b146040518060400160405280601b81526020017f4552524f525f455845435554494f4e5f53544154455f57524f4e470000000000815250906129d85760405162461bcd60e51b81526004016106029190614bf7565b506000546040517f721da9930000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063721da99390612a25906003850190600401614c0a565b60206040518083038186803b158015612a3d57600080fd5b505afa158015612a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7591906141fe565b6040518060400160405280601c81526020017f4552524f525f4e4f545f414c4c4f5745445f544f5f455845435554450000000081525090612ac95760405162461bcd60e51b81526004016106029190614bf7565b50600e8101805460ff19166003179055604080516080808201835283548252825190810183526001840180546001600160a01b03168252835160c0810190945260028501805461333e9587946020808801959194919390850192919082908290612b329061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054612b5e9061522e565b8015612bab5780601f10612b8057610100808354040283529160200191612bab565b820191906000526020600020905b815481529060010190602001808311612b8e57829003601f168201915b50505050508152602001600182018054612bc49061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054612bf09061522e565b8015612c3d5780601f10612c1257610100808354040283529160200191612c3d565b820191906000526020600020905b815481529060010190602001808311612c2057829003601f168201915b50505050508152602001600282018054612c569061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054612c829061522e565b8015612ccf5780601f10612ca457610100808354040283529160200191612ccf565b820191906000526020600020905b815481529060010190602001808311612cb257829003601f168201915b50505050508152602001600382018054612ce89061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054612d149061522e565b8015612d615780601f10612d3657610100808354040283529160200191612d61565b820191906000526020600020905b815481529060010190602001808311612d4457829003601f168201915b50505050508152602001600482018054612d7a9061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054612da69061522e565b8015612df35780601f10612dc857610100808354040283529160200191612df3565b820191906000526020600020905b815481529060010190602001808311612dd657829003601f168201915b50505050508152602001600582018054612e0c9061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054612e389061522e565b8015612e855780601f10612e5a57610100808354040283529160200191612e85565b820191906000526020600020905b815481529060010190602001808311612e6857829003601f168201915b505050505081525050815260200160078201805480602002602001604051908101604052809291908181526020016000905b82821015612f8e5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015612f7657602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411612f235790505b50505050508152505081526020019060010190612eb7565b505050508152602001600882018054612fa69061522e565b80601f0160208091040260200160405190810160405280929190818152602001828054612fd29061522e565b801561301f5780601f10612ff45761010080835404028352916020019161301f565b820191906000526020600020905b81548152906001019060200180831161300257829003601f168201915b5050505050815250508152602001600a820160405180608001604052908160008201805461304c9061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546130789061522e565b80156130c55780601f1061309a576101008083540402835291602001916130c5565b820191906000526020600020905b8154815290600101906020018083116130a857829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156131d7576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600181015493830193909352600283018054929392918401916131469061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546131729061522e565b80156131bf5780601f10613194576101008083540402835291602001916131bf565b820191906000526020600020905b8154815290600101906020018083116131a257829003601f168201915b505050505081525050815260200190600101906130f3565b5050505081526020016002820180546131ef9061522e565b80601f016020809104026020016040519081016040528092919081815260200182805461321b9061522e565b80156132685780601f1061323d57610100808354040283529160200191613268565b820191906000526020600020905b81548152906001019060200180831161324b57829003601f168201915b505050505081526020016003820180546132819061522e565b80601f01602080910402602001604051908101604052809291908181526020018280546132ad9061522e565b80156132fa5780601f106132cf576101008083540402835291602001916132fa565b820191906000526020600020905b8154815290600101906020018083116132dd57829003601f168201915b505050919092525050508152600e82015460209091019060ff16600381111561332557613325615294565b600381111561333657613336615294565b905250613a9a565b838160405161334d91906147eb565b604051908190038120907f7d25af5a7aeb27ebf1529e2916d8744eeae9d43ebc07a7dbce6ad410582a807b90600090a350505050565b60008054604051637ef7c88360e11b81527f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba101508926001600160a01b039092169163fdef9106916133dc913091339187913690600401614a8f565b602060405180830381600087803b1580156133f657600080fd5b505af115801561340a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342e91906141fe565b6109225760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b6044820152606401610602565b600061349b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b90506134a684613af9565b6000835111806134b35750815b156134c4576134c28484613bbb565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661362557805460ff191660011781556040516001600160a01b038316602482015261357190869060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe600000000000000000000000000000000000000000000000000000000179052613bbb565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b0383811691161461361c5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f75727468657220757067726164657300000000000000000000000000000000006064820152608401610602565b61362585613be0565b5050505050565b60065482546000916136529167ffffffffffffffff600160801b90920482169116614e16565b67ffffffffffffffff16613664613c20565b67ffffffffffffffff1610801561367f575061367f82613686565b9392505050565b600060036000838152600260205260409020600e015460ff1660038111156136b0576136b0615294565b1492915050565b60008060008360400151606001518060200190518101906136d891906142a3565b925092509250600060016136ea613c30565b6136f49190614e9a565b6007546040517f8e539e8c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201529192506000916001600160a01b0390911690638e539e8c9060240160206040518083038186803b15801561376057600080fd5b505afa158015613774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379891906143c1565b9050600081116040518060400160405280601681526020017f564f54494e475f4e4f5f564f54494e475f504f57455200000000000000000000815250906137f25760405162461bcd60e51b81526004016106029190614bf7565b508551600081815260046020526040902061380b613c20565b815467ffffffffffffffff9182167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161768010000000000000000868316810291909117808455600680547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff8316908516600160801b02908117865590546fffffffffffffffffffffffffffffffff90921677ffffffffffffffffffffffffffffffffffffffffffffffff90911617919004909116600160c01b0217815560038101839055604051339083907f4d72fe0577a3a3f7da968d7b892779dde102519c25527b29cf7054f245c791b990613906908b90614bf7565b60405180910390a384801561392057506139208233612483565b15613932576139328260013389613c3b565b5050505050505050565b60008061394b8385018561421b565b9150915061395985336139ba565b6040518060400160405280601381526020017f564f54494e475f43414e5f4e4f545f564f544500000000000000000000000000815250906139ad5760405162461bcd60e51b81526004016106029190614bf7565b5061362585833384613c3b565b60008281526004602052604081206139d2818561362c565b80156124ea575060075481546040517f3a46b1a80000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526801000000000000000090920467ffffffffffffffff1660248201526000929190911690633a46b1a89060440160206040518083038186803b158015613a5957600080fd5b505afa158015613a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9191906143c1565b11949350505050565b8051613aa590613e75565b6040518060400160405280601681526020017f564f54494e475f43414e5f4e4f545f4558454355544500000000000000000000815250906109225760405162461bcd60e51b81526004016106029190614bf7565b803b613b6d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610602565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b606061367f838360405180606001604052806027815260200161585260279139613f72565b613be981613af9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000613c2b4261405d565b905090565b6000613c2b4361405d565b6000848152600460208190526040808320600754815492517f3a46b1a80000000000000000000000000000000000000000000000000000000081526001600160a01b03888116958201959095526801000000000000000090930467ffffffffffffffff1660248401529093921690633a46b1a89060440160206040518083038186803b158015613cca57600080fd5b505afa158015613cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0291906143c1565b6001600160a01b038516600090815260048401602052604090205490915060ff166001816002811115613d3757613d37615294565b1415613d5757818360010154613d4d9190614e83565b6001840155613d87565b6002816002811115613d6b57613d6b615294565b1415613d8757818360020154613d819190614e83565b60028401555b8515613da757818360010154613d9d9190614dfe565b6001840155613dbd565b818360020154613db79190614dfe565b60028401555b85613dc9576002613dcc565b60015b6001600160a01b03861660009081526004850160205260409020805460ff19166001836002811115613e0057613e00615294565b0217905550604080518715158152602081018490526001600160a01b0387169189917fb34ee265e3d4f5ec4e8b52d59b2a9be8fceca2f274ebc080d8fba797fea9391f910160405180910390a3838015613e5e5750613e5e87613e75565b15613e6c57613e6c87612818565b50505050505050565b6000818152600460205260408120613e8c83613686565b15613e9a5750600092915050565b600181015460038201548254613ec2929190600160801b900467ffffffffffffffff166140c4565b15613ed05750600192915050565b613eda818461362c565b15613ee85750600092915050565b600081600201548260010154613efe9190614dfe565b60018301548354919250613f24918390600160801b900467ffffffffffffffff166140c4565b613f32575060009392505050565b600182015460038301548354613f5a929190600160c01b900467ffffffffffffffff166140c4565b613f68575060009392505050565b5060019392505050565b6060833b613fe85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610602565b600080856001600160a01b03168560405161400391906146bd565b600060405180830381855af49150503d806000811461403e576040519150601f19603f3d011682016040523d82523d6000602084013e614043565b606091505b50915091506140538282866140fd565b9695505050505050565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff8311156140bd5760405162461bcd60e51b81526004016106029190614bf7565b5090919050565b6000826140d35750600061367f565b6000836140e8670de0b6b3a764000087614e64565b6140f29190614e42565b909210949350505050565b6060831561410c57508161367f565b82511561411c5782518084602001fd5b8160405162461bcd60e51b81526004016106029190614bf7565b60006080828403121561414857600080fd5b50919050565b60006020828403121561416057600080fd5b813561367f8161582e565b6000806040838503121561417e57600080fd5b82356141898161582e565b9150602083013567ffffffffffffffff8111156141a557600080fd5b8301601f810185136141b657600080fd5b80356141c96141c482614dd6565b614da5565b8181528660208385010111156141de57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60006020828403121561421057600080fd5b815161367f81615843565b6000806040838503121561422e57600080fd5b823561423981615843565b9150602083013561424981615843565b809150509250929050565b600080600060a0848603121561426957600080fd5b83356142748161582e565b925060208401356142848161582e565b915060a0840185101561429657600080fd5b6040840190509250925092565b6000806000606084860312156142b857600080fd5b835167ffffffffffffffff8111156142cf57600080fd5b8401601f810186136142e057600080fd5b80516142ee6141c482614dd6565b81815287602083850101111561430357600080fd5b614314826020830160208601615202565b809550505050602084015161432881615843565b604085015190925061433981615843565b809150509250925092565b6000806040838503121561435757600080fd5b823567ffffffffffffffff8082111561436f57600080fd5b61437b86838701614136565b9350602085013591508082111561439157600080fd5b5061439e85828601614136565b9150509250929050565b6000602082840312156143ba57600080fd5b5035919050565b6000602082840312156143d357600080fd5b5051919050565b600080604083850312156143ed57600080fd5b8235915060208301356142498161582e565b60008060006040848603121561441457600080fd5b83359250602084013567ffffffffffffffff8082111561443357600080fd5b818601915086601f83011261444757600080fd5b81358181111561445657600080fd5b87602082850101111561446857600080fd5b6020830194508093505050509250925092565b60006020828403121561448d57600080fd5b813567ffffffffffffffff8116811461367f57600080fd5b6000600482106144b7576144b7615294565b50815260200190565b60006144cd83835161461c565b6020838101518051908201926000915b808310156145215784516001600160a01b0381511683528481015185840152604061450d8185018284015161461c565b9350505083850194506001830192506144dd565b5061453d61453382604089015161461c565b606088015161461c565b979650505050505050565b6000614554838361463f565b6001838101805460009182526020808320909490929091905b818110156145aa576001600160a01b038454168352848401548684015261459a604084016002860161463f565b600394909401939250840161456d565b505061453d6145bc826002890161463f565b6003880161463f565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60008151808452614608816020860160208601615202565b601f01601f19169290920160200192915050565b6000815161462e818560208601615202565b601f01601f19169290920192915050565b6000815461464c8161522e565b600182811680156146645760018114614676576146a3565b60ff19841687526020870194506146a3565b8560005260208060002060005b8581101561469c5781548a820152908401908201614683565b8901965050505b5050505092915050565b8183823760009101908152919050565b600082516146cf818460208701615202565b9190910192915050565b8151815260006020808401516001600160a01b0380825116838601528282015161474761473d61473361472961471f61471660408c01875161461c565b8987015161461c565b604086015161461c565b606085015161461c565b608084015161461c565b60a083015161461c565b60408401518051908601925060009190825b818110156147b457845180518716845288015180519089019085908a8601905b808310156147a35783516001600160e01b0319168252928b019260019290920191908b0190614779565b50968a019694505050600101614759565b50506147de6147d46147ca83606089015161461c565b60408c01516144c0565b60608b01516144a5565b9998505050505050505050565b81548152600060206001600160a01b03806001860154168285015261484661483d61483461482b6148226040890160028b0161463f565b60038a0161463f565b6004890161463f565b6005880161463f565b6006870161463f565b614853816007880161463f565b60088701805460009182528582209350905b81811015614a6457848454168352858301600185015461488e6001870160009081526020902090565b60005b826007820110156149495781546148b4858260e01b6001600160e01b0319169052565b6001600160e01b031960c082901b81168c87015260a082901b81166040870152608082901b811660608701526148fb60808701828460601b166001600160e01b0319169052565b61491660a08701828460401b166001600160e01b0319169052565b6001600160e01b0319828d1b8216811660c088015291161660e08501526101009093019260019190910190600801614891565b905490828110156149725761496a848360e01b6001600160e01b0319169052565b928901926001015b828110156149935760c082901b6001600160e01b0319168452928901926001015b828110156149b45760a082901b6001600160e01b0319168452928901926001015b828110156149d557608082901b6001600160e01b0319168452928901926001015b828110156149f657606082901b6001600160e01b0319168452928901926001015b82811015614a1757604082901b6001600160e01b0319168452928901926001015b82811015614a3657818a1b6001600160e01b0319168452928901926001015b82811015614a50576001600160e01b031982168452928901925b505050600294909401939250600101614865565b505061453d614a82614a798360098b0161463f565b600a8a01614548565b600e89015460ff166144a5565b60006001600160a01b0380881683528087166020840152508460408301526080606083015261453d6080830184866145c5565b60006101408083018d1515845260208d151581860152604067ffffffffffffffff808f16828801526060818f1681890152818e166080890152818d1660a08901528b60c08901528a60e089015289610100890152856101208901528495508851915081855261016094508488019550848260051b890101945083890160005b83811015614baf578987037ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea0018852815180516001600160a01b031688528681015187890152850151858801849052614b9c848901826145f0565b9887019897505090850190600101614b41565b50505050505080925050509b9a5050505050505050505050565b6020810160038310614bdd57614bdd615294565b91905290565b6020815260006124ea6020830184866145c5565b60208152600061367f60208301846145f0565b6000602080835260008454614c1e8161522e565b80848701526040600180841660008114614c3f5760018114614c5357614c81565b60ff198516838a0152606089019550614c81565b896000528660002060005b85811015614c795781548b8201860152908301908801614c5e565b8a0184019650505b509398975050505050505050565b6000808335601e19843603018112614ca657600080fd5b83018035915067ffffffffffffffff821115614cc157600080fd5b6020019150600581901b3603821315614cd957600080fd5b9250929050565b6000808335601e19843603018112614cf757600080fd5b83018035915067ffffffffffffffff821115614d1257600080fd5b602001915036819003821315614cd957600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126146cf57600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126146cf57600080fd5b6000823560be198336030181126146cf57600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614dce57614dce6152aa565b604052919050565b600067ffffffffffffffff821115614df057614df06152aa565b50601f01601f191660200190565b60008219821115614e1157614e1161527e565b500190565b600067ffffffffffffffff808316818516808303821115614e3957614e3961527e565b01949350505050565b600082614e5f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615614e7e57614e7e61527e565b500290565b600082821015614e9557614e9561527e565b500390565b600067ffffffffffffffff83811690831681811015614ebb57614ebb61527e565b039392505050565b601f821115614efc57806000526020600020601f840160051c81016020851015614eea5750805b613625601f850160051c830182614f01565b505050565b5b818110156109225760008155600101614f02565b68010000000000000000831115614f2f57614f2f6152aa565b805483825580841015615014577f55555555555555555555555555555555555555555555555555555555555555556001818311811615614f7157614f7161527e565b6003828711821615614f8557614f8561527e565b600085815260208120909350878202810190828602015b8082101561500e57848255848483015560028201614fba815461522e565b801561500357601f80821160018114614fd557888455615000565b600084815260209020614ff183850160051c82018a8301614f01565b50600084815260208120818655555b50505b505090820190614f9c565b50505050505b5060008181526020812083915b858110156150525761503c6150368487614d27565b8361565d565b6020929092019160039190910190600101615021565b505050505050565b68010000000000000000831115615073576150736152aa565b805483825580841015615104577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60018183118116156150b5576150b561527e565b8186118116156150c7576150c761527e565b60008481526020812090925086821b81019084831b015b808210156150ff578382556150f48383016152c0565b6002820191506150de565b505050505b5060008181526020812083915b858110156150525761512c6151268487614d5b565b83615766565b6020929092019160029190910190600101615111565b67ffffffffffffffff83111561515a5761515a6152aa565b61516e83615168835461522e565b83614ec3565b6000601f8411600181146151a2576000851561518a5750838201355b600019600387901b1c1916600186901b178355613625565b600083815260209020601f19861690835b828110156151d357868501358255602094850194600190920191016151b3565b50868210156151f05760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60005b8381101561521d578181015183820152602001615205565b838111156128125750506000910152565b600181811c9082168061524257607f821691505b6020821081141561414857634e487b7160e01b600052602260045260246000fd5b60006000198214156152775761527761527e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b805460008255801561092257816000526020600020614efc6007830160031c820182614f01565b68010000000000000000821115615300576153006152aa565b805482825580831015614efc578160005260206000206007840160031c8101601c8560021b168015615343576000198083018054828460200360031b1c16815550505b506136256007840160031c830182614f01565b81356153618161582e565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff1983541617825550600180820160208085013560be198636030181126153a557600080fd5b85016153b18180614ce0565b67ffffffffffffffff8111156153c9576153c96152aa565b6153dd816153d7875461522e565b87614ec3565b6000601f82116001811461541157600083156153f95750838201355b600019600385901b1c1916600184901b178755615466565b600087815260209020601f19841690835b8281101561543f5786850135825593880193908a01908801615422565b508482101561545c5760001960f88660031b161c19848701351681555b50508783891b0187555b5050505061547682820182614ce0565b94509250615488848460028801615142565b6154956040820182614ce0565b945092506154a7848460038801615142565b6154b46060820182614ce0565b945092506154c6848460048801615142565b6154d36080820182614ce0565b945092506154e5848460058801615142565b6154f260a0820182614ce0565b945092505050615506828260068601615142565b50506155156040830183614c8f565b61552381836007860161505a565b50506155326060830183614ce0565b612812818360088601615142565b61554a8283614ce0565b67ffffffffffffffff811115615562576155626152aa565b61557681615570855461522e565b85614ec3565b6000601f8211600181146155aa57600083156155925750838201355b600019600385901b1c1916600184901b178555615604565b600085815260209020601f19841690835b828110156155db57868501358255602094850194600190920191016155bb565b50848210156155f85760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506156156020830183614c8f565b615623818360018601614f16565b50506156326040830183614ce0565b615640818360028601615142565b505061564f6060830183614ce0565b612812818360038601615142565b81356156688161582e565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03821617825550600160208084013582840155600283016156ac6040860186614ce0565b67ffffffffffffffff8111156156c4576156c46152aa565b6156d281615570855461522e565b6000601f82116001811461570657600083156156ee5750838201355b600019600385901b1c1916600184901b17855561575b565b600085815260209020601f19841690835b828110156157345786850135825593880193908901908801615717565b50848210156157515760001960f88660031b161c19848701351681555b50508683881b0185555b505050505050505050565b81356157718161582e565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03821617825550600180820160206157ab81860186614c8f565b6157b581856152e7565b60009384528284209380805b838110156158225784356001600160e01b0319811681146157e0578384fd5b875463ffffffff600385901b90811b801990921660e09390931c901b1617875593850193600490910190601c82111561581b57958701958291505b87016157c1565b50505050505050505050565b6001600160a01b038116811461070757600080fd5b801515811461070757600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122029c468b7b53ce653bd94c58d76212d1ad34aa05ac51c7931cba4484b916ffc0064736f6c6343000806003360a06040523060601b60805234801561001757600080fd5b50600054600160a81b900460ff168061003a5750600054600160a01b900460ff16155b6100a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054600160a81b900460ff161580156100cb576000805461ffff60a01b191661010160a01b1790555b80156100df576000805460ff60a81b191690555b5060805160601c6119e7610113600039600081816101ed0152818161028801528181610390015261042601526119e76000f3fe60806040526004361061007f5760003560e01c8063bfe07da61161004e578063bfe07da61461016f578063c4d66de814610182578063d57b2826146101a2578063e3d670d7146101c257600080fd5b8063206b60f9146100c05780633659cfe6146101065780634f1ef28614610128578063b908afa81461013b57600080fd5b366100bb5760405134815233907f05e3a6f227520ac02b0bc672aba24f432d28e54438fdd10676ed47a34ac619e39060200160405180910390a2005b600080fd5b3480156100cc57600080fd5b506100f47f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c81565b60405190815260200160405180910390f35b34801561011257600080fd5b5061012661012136600461165f565b6101e2565b005b6101266101363660046116ef565b610385565b34801561014757600080fd5b506100f47f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba10150881565b61012661017d3660046117b3565b610514565b34801561018e57600080fd5b5061012661019d36600461165f565b610526565b3480156101ae57600080fd5b506101266101bd36600461167c565b61068d565b3480156101ce57600080fd5b506100f46101dd36600461165f565b610977565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102865760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166102e17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461035d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161027d565b61036681610a24565b6040805160008082526020820190925261038291839190610b34565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104245760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161027d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661047f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146104fb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161027d565b61050482610a24565b61051082826001610b34565b5050565b61052084848484610cf8565b50505050565b600054600160a81b900460ff1680610559575060005474010000000000000000000000000000000000000000900460ff16155b6105cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161027d565b600054600160a81b900460ff1615801561062057600080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1675010100000000000000000000000000000000000000001790555b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841617905561065b610e1d565b801561051057600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1690555050565b600260015414156106e05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161027d565b6002600155600080546040517ffdef91060000000000000000000000000000000000000000000000000000000081527f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c926001600160a01b039092169163fdef910691610757913091339187913690600401611891565b602060405180830381600087803b15801561077157600080fd5b505af1158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a9919061180f565b6107f55760405162461bcd60e51b815260206004820152600b60248201527f617574683a20636865636b000000000000000000000000000000000000000000604482015260640161027d565b60408051808201909152601981527f5641554c545f5452414e534645525f56414c55455f5a45524f000000000000006020820152846108475760405162461bcd60e51b815260040161027d91906118c4565b506001600160a01b038616610908576000856001600160a01b03168560405160006040518083038185875af1925050503d80600081146108a3576040519150601f19603f3d011682016040523d82523d6000602084013e6108a8565b606091505b50509050806040518060400160405280601381526020017f5641554c545f53454e445f524556455254454400000000000000000000000000815250906109015760405162461bcd60e51b815260040161027d91906118c4565b505061091c565b61091c6001600160a01b0387168686610f50565b846001600160a01b0316866001600160a01b03167f17d2993561f784354739cb5cc59cf0c78b661010ddd8d319a416bc7d08b8f205868686604051610963939291906118f7565b60405180910390a350506001805550505050565b60006001600160a01b03821661098e575047919050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156109e657600080fd5b505afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e9190611831565b92915050565b600080546040517ffdef91060000000000000000000000000000000000000000000000000000000081527f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba101508926001600160a01b039092169163fdef910691610a96913091339187913690600401611891565b602060405180830381600087803b158015610ab057600080fd5b505af1158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae8919061180f565b6105105760405162461bcd60e51b815260206004820152600b60248201527f617574683a20636865636b000000000000000000000000000000000000000000604482015260640161027d565b6000610b677f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b9050610b7284610ffe565b600083511180610b7f5750815b15610b9057610b8e84846110cb565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610cf157805460ff191660011781556040516001600160a01b0383166024820152610c3d90869060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe6000000000000000000000000000000000000000000000000000000001790526110cb565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b03838116911614610ce85760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f7572746865722075706772616465730000000000000000000000000000000000606482015260840161027d565b610cf1856110f7565b5050505050565b60408051808201909152601881527f5641554c545f4445504f5349545f56414c55455f5a45524f0000000000000000602082015283610d4a5760405162461bcd60e51b815260040161027d91906118c4565b506001600160a01b038416610db35760408051808201909152601481527f5641554c545f56414c55455f4d49534d415443480000000000000000000000006020820152348414610dad5760405162461bcd60e51b815260040161027d91906118c4565b50610dc8565b610dc86001600160a01b038516333086611137565b336001600160a01b0316846001600160a01b03167fe8774b48760b6f344aa41c1034a142c87daf47f915174d6621495d20fd2b7e9e858585604051610e0f939291906118f7565b60405180910390a350505050565b600054600160a81b900460ff1680610e50575060005474010000000000000000000000000000000000000000900460ff16155b610ec25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161027d565b600054600160a81b900460ff16158015610f1757600080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1675010100000000000000000000000000000000000000001790555b610f1f611188565b801561038257600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16905550565b6040516001600160a01b038316602482015260448101829052610ff99084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112b7565b505050565b803b6110725760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161027d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60606110f0838360405180606001604052806027815260200161198b6027913961139c565b9392505050565b61110081610ffe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6040516001600160a01b03808516602483015283166044820152606481018290526105209085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610f95565b600054600160a81b900460ff16806111bb575060005474010000000000000000000000000000000000000000900460ff16155b61122d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161027d565b600054600160a81b900460ff1615801561128257600080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1675010100000000000000000000000000000000000000001790555b60018055801561038257600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16905550565b600061130c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114879092919063ffffffff16565b805190915015610ff9578080602001905181019061132a919061180f565b610ff95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161027d565b6060833b6114125760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161027d565b600080856001600160a01b03168560405161142d9190611875565b600060405180830381855af49150503d8060008114611468576040519150601f19603f3d011682016040523d82523d6000602084013e61146d565b606091505b509150915061147d82828661149e565b9695505050505050565b606061149684846000856114d7565b949350505050565b606083156114ad5750816110f0565b8251156114bd5782518084602001fd5b8160405162461bcd60e51b815260040161027d91906118c4565b60608247101561154f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161027d565b843b61159d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161027d565b600080866001600160a01b031685876040516115b99190611875565b60006040518083038185875af1925050503d80600081146115f6576040519150601f19603f3d011682016040523d82523d6000602084013e6115fb565b606091505b509150915061160b82828661149e565b979650505050505050565b60008083601f84011261162857600080fd5b50813567ffffffffffffffff81111561164057600080fd5b60208301915083602082850101111561165857600080fd5b9250929050565b60006020828403121561167157600080fd5b81356110f081611975565b60008060008060006080868803121561169457600080fd5b853561169f81611975565b945060208601356116af81611975565b935060408601359250606086013567ffffffffffffffff8111156116d257600080fd5b6116de88828901611616565b969995985093965092949392505050565b6000806040838503121561170257600080fd5b823561170d81611975565b9150602083013567ffffffffffffffff8082111561172a57600080fd5b818501915085601f83011261173e57600080fd5b81358181111561175057611750611946565b604051601f8201601f19908116603f0116810190838211818310171561177857611778611946565b8160405282815288602084870101111561179157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080606085870312156117c957600080fd5b84356117d481611975565b935060208501359250604085013567ffffffffffffffff8111156117f757600080fd5b61180387828801611616565b95989497509550505050565b60006020828403121561182157600080fd5b815180151581146110f057600080fd5b60006020828403121561184357600080fd5b5051919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6000825161188781846020870161191a565b9190910192915050565b60006001600160a01b0380881683528087166020840152508460408301526080606083015261160b60808301848661184a565b60208152600082518060208401526118e381604085016020870161191a565b601f01601f19169190910160400192915050565b83815260406020820152600061191160408301848661184a565b95945050505050565b60005b8381101561193557818101518382015260200161191d565b838111156105205750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b038116811461038257600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201f3ca7c7b1303a03f8b7b8954db0860cacf6571ec9ca560390efb2742ba8d64d64736f6c6343000806003360a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff168062000033575060005460ff16155b6200009b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000be576000805461ffff19166101011790555b8015620000d1576000805461ff00191690555b5060805160601c6134ee620001066000396000818161096b01528181610a0101528181610d190152610daf01526134ee6000f3fe60806040526004361061018b5760003560e01c80637e8c7f08116100d6578063c34c08e51161007f578063d96054c411610059578063d96054c414610497578063ee57e36f146104b7578063fdef9106146104d757600080fd5b8063c34c08e514610437578063ce43e4e014610457578063d68bad2c1461047757600080fd5b8063b6989ca3116100b0578063b6989ca3146103c3578063b908afa8146103e3578063c032dc301461041757600080fd5b80637e8c7f0814610350578063ab8c71c01461036b578063aedfd0b5146103a357600080fd5b806346b2057511610138578063628bb47811610112578063628bb478146102be578063721da993146102ee57806375cbdae01461030e57600080fd5b806346b205751461026b5780634a12e2531461028b5780634f1ef286146102ab57600080fd5b80632c6f5f21116101695780632c6f5f21146101f25780633659cfe614610229578063392f37e91461024957600080fd5b806310ad3f1f146101905780631c3c0ea8146101b257806327da6af6146101d2575b600080fd5b34801561019c57600080fd5b506101b06101ab366004612685565b6104f7565b005b3480156101be57600080fd5b506101b06101cd366004612372565b61061f565b3480156101de57600080fd5b506101b06101ed36600461248f565b6106ed565b3480156101fe57600080fd5b5061021261020d366004612986565b6108ae565b604051610220929190612f4b565b60405180910390f35b34801561023557600080fd5b506101b0610244366004612372565b610960565b34801561025557600080fd5b5061025e610afe565b6040516102209190612cb4565b34801561027757600080fd5b506101b06102863660046126f5565b610b8c565b34801561029757600080fd5b506101b06102a6366004612517565b610c76565b6101b06102b9366004612543565b610d0e565b3480156102ca57600080fd5b506102de6102d9366004612517565b610e9d565b6040519015158152602001610220565b3480156102fa57600080fd5b506102de6103093660046125b5565b610f19565b34801561031a57600080fd5b506103427f466230b035c70053998e360e86a09ba59f811196ebb74997ff428492b8ca150b81565b604051908152602001610220565b34801561035c57600080fd5b50610342636223714d60e01b81565b34801561037757600080fd5b5060055461038b906001600160a01b031681565b6040516001600160a01b039091168152602001610220565b3480156103af57600080fd5b5060045461038b906001600160a01b031681565b3480156103cf57600080fd5b506101b06103de3660046125f7565b610fbc565b3480156103ef57600080fd5b506103427f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba10150881565b34801561042357600080fd5b506101b06104323660046129bb565b611110565b34801561044357600080fd5b5060065461038b906001600160a01b031681565b34801561046357600080fd5b506101b061047236600461243c565b61117f565b34801561048357600080fd5b506101b061049236600461238f565b611213565b3480156104a357600080fd5b506101b06104b236600461238f565b6112ad565b3480156104c357600080fd5b506101b06104d23660046125b5565b611340565b3480156104e357600080fd5b506102de6104f23660046123d0565b61141c565b7f466230b035c70053998e360e86a09ba59f811196ebb74997ff428492b8ca150b61055b3033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061143592505050565b61059a5760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b60448201526064015b60405180910390fd5b6005546040517fa4e479f50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a4e479f5906105e790879087908790600401612cc7565b600060405180830381600087803b15801561060157600080fd5b505af1158015610615573d6000803e3d6000fd5b5050505050505050565b7f466230b035c70053998e360e86a09ba59f811196ebb74997ff428492b8ca150b6106833033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061143592505050565b6106bd5760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b6044820152606401610591565b506006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051602036601f81018290048202830182019093528282528592636223714d60e01b9261073d9285923392869290916000918190840183828082843760009201919091525061143592505050565b6107755760405162461bcd60e51b81526020600482015260096024820152680c2c6d87440c2eae8d60bb1b6044820152606401610591565b60005b838110156108a657600085858381811061079457610794613422565b9050606002018036038101906107aa919061275e565b90506000815160028111156107c1576107c161340c565b14156107fe576107f987826040015183602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916611475565b610893565b6001815160028111156108135761081361340c565b141561084b576107f987826040015183602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916611487565b6002815160028111156108605761086061340c565b1415610893576108938782602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661162c565b508061089e816133c5565b915050610778565b505050505050565b6108b66120ca565b600480546040517f2c6f5f210000000000000000000000000000000000000000000000000000000081526000926001600160a01b0390921691632c6f5f2191610901918791016130a5565b600060405180830381600087803b15801561091b57600080fd5b505af115801561092f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261095791908101906127d4565b91509150915091565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109ff5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610591565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a5a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ad65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610591565b610adf816117f9565b60408051600080825260208201909252610afb918391906118a8565b50565b60038054610b0b90613390565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3790613390565b8015610b845780601f10610b5957610100808354040283529160200191610b84565b820191906000526020600020905b815481529060010190602001808311610b6757829003601f168201915b505050505081565b7f466230b035c70053998e360e86a09ba59f811196ebb74997ff428492b8ca150b610bf03033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061143592505050565b610c2a5760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b6044820152606401610591565b600480546040517f46b205750000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916346b20575916105e79188918891889101612d7b565b60408051602036601f81018290048202830182019093528282528492636223714d60e01b92610cc69285923392869290916000918190840183828082843760009201919091525061143592505050565b610cfe5760405162461bcd60e51b81526020600482015260096024820152680c2c6d87440c2eae8d60bb1b6044820152606401610591565b610d08848461162c565b50505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610dad5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610591565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e087f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e845760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610591565b610e8d826117f9565b610e99828260016118a8565b5050565b600060026000610efe858560405165465245455a4560d01b60208201526bffffffffffffffffffffffff19606084901b166026820152603a8101829052600090605a0160405160208183030381529060405280519060200120905092915050565b815260208101919091526040016000205460ff169392505050565b6005546040517f721da9930000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063721da99390610f659086908690600401612ca0565b60206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190612593565b9392505050565b600054610100900460ff1680610fd5575060005460ff16155b6110475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610591565b600054610100900460ff16158015611069576000805461ffff19166101011790555b600480546001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff19928316179092556005805487841690831617905560068054928616929091169190911790556110bc82611a65565b7fcf7c08ee988afa0cbaf26005358c32ad321ae7b4937294f8735b96849301f56987876040516110ed929190612ca0565b60405180910390a18015611107576000805461ff00191690555b50505050505050565b6040517ffe0d94c1000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382169063fe0d94c190602401600060405180830381600087803b15801561116b57600080fd5b505af11580156108a6573d6000803e3d6000fd5b60408051602036601f81018290048202830182019093528282528692636223714d60e01b926111cf9285923392869290916000918190840183828082843760009201919091525061143592505050565b6112075760405162461bcd60e51b81526020600482015260096024820152680c2c6d87440c2eae8d60bb1b6044820152606401610591565b6108a686868686611b31565b60408051602036601f81018290048202830182019093528282528592636223714d60e01b926112639285923392869290916000918190840183828082843760009201919091525061143592505050565b61129b5760405162461bcd60e51b81526020600482015260096024820152680c2c6d87440c2eae8d60bb1b6044820152606401610591565b6112a6858585611475565b5050505050565b60408051602036601f81018290048202830182019093528282528592636223714d60e01b926112fd9285923392869290916000918190840183828082843760009201919091525061143592505050565b6113355760405162461bcd60e51b81526020600482015260096024820152680c2c6d87440c2eae8d60bb1b6044820152606401610591565b6112a6858585611487565b7f466230b035c70053998e360e86a09ba59f811196ebb74997ff428492b8ca150b6113a43033836000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061143592505050565b6113de5760405162461bcd60e51b815260206004820152600b60248201526a617574683a20636865636b60a81b6044820152606401610591565b7fcf7c08ee988afa0cbaf26005358c32ad321ae7b4937294f8735b96849301f569838360405161140f929190612ca0565b60405180910390a1505050565b600061142a85858585611435565b90505b949350505050565b600061144385858585611ce3565b8061145c575061145c856001600160a01b038585611ce3565b8061142a575061142a6001600160a01b03858585611ce3565b6114828383836002611b31565b505050565b6114918382610e9d565b156114de5760405162461bcd60e51b815260206004820152600b60248201527f61636c3a2066726f7a656e0000000000000000000000000000000000000000006044820152606401610591565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606086811b8216602a85015287901b16603e830152605280830185905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b03166115b85760405162461bcd60e51b815260206004820152601960248201527f61636c3a20726f6c6520616c7265616479207265766f6b6564000000000000006044820152606401610591565b600081815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916905590516001600160a01b038681168252851691339185917f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f67524910160405180910390a450505050565b6116368282610e9d565b156116835760405162461bcd60e51b815260206004820152600b60248201527f61636c3a2066726f7a656e0000000000000000000000000000000000000000006044820152606401610591565b6040805165465245455a4560d01b6020808301919091526bffffffffffffffffffffffff19606086901b166026830152603a80830185905283518084039091018152605a9092018352815191810191909120600081815260029092529190205460ff16156117335760405162461bcd60e51b815260206004820152601860248201527f61636c3a20726f6c6520616c726561647920667265657a6500000000000000006044820152606401610591565b600160026000611794868660405165465245455a4560d01b60208201526bffffffffffffffffffffffff19606084901b166026820152603a8101829052600090605a0160405160208183030381529060405280519060200120905092915050565b81526020808201929092526040908101600020805460ff19169315159390931790925590516001600160a01b0385168152339184917f5bc82808e00f308181e1f2385733b7e64006e784fbe7ed607e74c16580eb6d88910160405180910390a3505050565b61185c30337f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba1015086000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061143592505050565b610afb5760405162461bcd60e51b815260206004820152600a60248201527f617574683a636865636b000000000000000000000000000000000000000000006044820152606401610591565b60006118db7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b90506118e684611e6d565b6000835111806118f35750815b15611904576119028484611f2f565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166112a657805460ff191660011781556040516001600160a01b03831660248201526119b190869060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe600000000000000000000000000000000000000000000000000000000179052611f2f565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b03838116911614611a5c5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f75727468657220757067726164657300000000000000000000000000000000006064820152608401610591565b6112a685611f54565b600054610100900460ff1680611a7e575060005460ff16155b611af05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610591565b600054610100900460ff16158015611b12576000805461ffff19166101011790555b611b1c3083611f94565b8015610e99576000805461ff00191690555050565b611b3b8483610e9d565b15611b885760405162461bcd60e51b815260206004820152600b60248201527f61636c3a2066726f7a656e0000000000000000000000000000000000000000006044820152606401610591565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff19606087811b8216602a85015288901b16603e830152605280830186905283518084039091018152607290920190925280519101206000906000818152600160205260409020549091506001600160a01b031615611c635760405162461bcd60e51b815260206004820152601960248201527f61636c3a20726f6c6520616c7265616479206772616e746564000000000000006044820152606401610591565b600081815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038681169182179092558351898316815292830152861691339186917f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e807644910160405180910390a45050505050565b60008060016000611d688888886040517f5045524d495353494f4e0000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084811b8216602a84015285901b16603e820152605281018290526000906072016040516020818303038152906040528051906020012090509392505050565b81526020810191909152604001600020546001600160a01b031690508015611d9457600091505061142d565b6001600160a01b03811660021415611db057600191505061142d565b6040517f013827a30000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063013827a390611dfb908990899089908990600401612c6e565b602060405180830381600087803b158015611e1557600080fd5b505af1925050508015611e45575060408051601f3d908101601f19168201909252611e4291810190612593565b60015b611e4e57611e61565b8015611e5f5760019250505061142d565b505b50600095945050505050565b803b611ee15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610591565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060610fb5838360405180606001604052806027815260200161349260279139611fa6565b611f5d81611e6d565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610e998282636223714d60e01b611475565b6060833b61201c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610591565b600080856001600160a01b0316856040516120379190612c52565b600060405180830381855af49150503d8060008114612072576040519150601f19603f3d011682016040523d82523d6000602084013e612077565b606091505b5091509150612087828286612091565b9695505050505050565b606083156120a0575081610fb5565b8251156120b05782518084602001fd5b8160405162461bcd60e51b81526004016105919190612cb4565b604051806080016040528060006001600160a01b0316815260200161211e6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b815260200160608152602001606081525090565b600082601f83011261214357600080fd5b8151602061215861215383613289565b613258565b80838252828201915082860187848660051b890101111561217857600080fd5b60005b8581101561226e57815167ffffffffffffffff8082111561219b57600080fd5b818a019150604080601f19848e030112156121b557600080fd5b6121bd6131e9565b888401516121ca8161344e565b815283820151838111156121dd57600080fd5b8085019450508c603f8501126121f257600080fd5b88840151925061220461215384613289565b808482528a820191508386018f858760051b890101111561222457600080fd5b600096505b85871015612253578051945061223e85613463565b84835260019690960195918b01918b01612229565b50828b0152508752505050928401929084019060010161217b565b5090979650505050505050565b60008083601f84011261228d57600080fd5b50813567ffffffffffffffff8111156122a557600080fd5b6020830191508360208285010111156122bd57600080fd5b9250929050565b600082601f8301126122d557600080fd5b81356122e3612153826132ad565b8181528460208386010111156122f857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261232657600080fd5b8151612334612153826132ad565b81815284602083860101111561234957600080fd5b61142d826020830160208701613364565b60006080828403121561236c57600080fd5b50919050565b60006020828403121561238457600080fd5b8135610fb58161344e565b6000806000606084860312156123a457600080fd5b83356123af8161344e565b925060208401356123bf8161344e565b929592945050506040919091013590565b600080600080608085870312156123e657600080fd5b84356123f18161344e565b935060208501356124018161344e565b925060408501359150606085013567ffffffffffffffff81111561242457600080fd5b612430878288016122c4565b91505092959194509250565b6000806000806080858703121561245257600080fd5b843561245d8161344e565b9350602085013561246d8161344e565b92506040850135915060608501356124848161344e565b939692955090935050565b6000806000604084860312156124a457600080fd5b83356124af8161344e565b9250602084013567ffffffffffffffff808211156124cc57600080fd5b818601915086601f8301126124e057600080fd5b8135818111156124ef57600080fd5b87602060608302850101111561250457600080fd5b6020830194508093505050509250925092565b6000806040838503121561252a57600080fd5b82356125358161344e565b946020939093013593505050565b6000806040838503121561255657600080fd5b82356125618161344e565b9150602083013567ffffffffffffffff81111561257d57600080fd5b612589858286016122c4565b9150509250929050565b6000602082840312156125a557600080fd5b81518015158114610fb557600080fd5b600080602083850312156125c857600080fd5b823567ffffffffffffffff8111156125df57600080fd5b6125eb8582860161227b565b90969095509350505050565b60008060008060008060a0878903121561261057600080fd5b863567ffffffffffffffff81111561262757600080fd5b61263389828a0161227b565b90975095505060208701356126478161344e565b935060408701356126578161344e565b925060608701356126678161344e565b915060808701356126778161344e565b809150509295509295509295565b60008060006040848603121561269a57600080fd5b833567ffffffffffffffff808211156126b257600080fd5b6126be8783880161227b565b909550935060208601359150808211156126d757600080fd5b508401606081870312156126ea57600080fd5b809150509250925092565b60008060006040848603121561270a57600080fd5b833567ffffffffffffffff8082111561272257600080fd5b61272e8783880161227b565b9095509350602086013591508082111561274757600080fd5b506127548682870161235a565b9150509250925092565b60006060828403121561277057600080fd5b6040516060810181811067ffffffffffffffff8211171561279357612793613438565b6040528235600381106127a557600080fd5b815260208301356127b581613463565b602082015260408301356127c88161344e565b60408201529392505050565b600080604083850312156127e757600080fd5b825167ffffffffffffffff808211156127ff57600080fd5b908401906080828703121561281357600080fd5b61281b613212565b82516128268161344e565b815260208301518281111561283a57600080fd5b830160c0818903121561284c57600080fd5b612854613235565b81518481111561286357600080fd5b61286f8a828501612315565b82525060208201518481111561288457600080fd5b6128908a828501612315565b6020830152506040820151848111156128a857600080fd5b6128b48a828501612315565b6040830152506060820151848111156128cc57600080fd5b6128d88a828501612315565b6060830152506080820151848111156128f057600080fd5b6128fc8a828501612315565b60808301525060a08201518481111561291457600080fd5b6129208a828501612315565b60a08301525060208301525060408301518281111561293e57600080fd5b61294a88828601612132565b60408301525060608301518281111561296257600080fd5b61296e88828601612315565b60608301525060209590950151949694955050505050565b60006020828403121561299857600080fd5b813567ffffffffffffffff8111156129af57600080fd5b61142d8482850161235a565b600080604083850312156129ce57600080fd5b8235915060208301356129e08161344e565b809150509250929050565b81835260006020808501808196508560051b810191508460005b87811015612a3b578284038952612a1c828861331e565b612a27868284612bfb565b9a87019a9550505090840190600101612a05565b5091979650505050505050565b81835260006020808501808196508560051b810191508460005b87811015612a3b57828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1883603018112612aa157600080fd5b870160408581018235612ab38161344e565b6001600160a01b03168752612aca838901846132d5565b888a019390935290829052909150606086019060005b83811015612b27578135612af381613463565b7fffffffff000000000000000000000000000000000000000000000000000000001683529188019190880190600101612ae0565b50509986019994505090840190600101612a62565b600081518084526020808501808196508360051b810191508286016000805b86811015612bed578385038a52825180516001600160a01b031686528601516040878701819052815190870181905290870190606087019084905b80821015612bd85783517fffffffff00000000000000000000000000000000000000000000000000000000168352928901929189019160019190910190612b96565b50509a87019a95505091850191600101612b5b565b509298975050505050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60008151808452612c3e816020860160208601613364565b601f01601f19169290920160200192915050565b60008251612c64818460208701613364565b9190910192915050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526120876080830184612c26565b60208152600061142d602083018486612bfb565b602081526000610fb56020830184612c26565b604081526000612cdb604083018587612bfb565b60208382038185015260608201853560048110612cf757600080fd5b8352612d05868301876132d5565b6060858501529182905290600090608085015b81831015612d48578335612d2b8161344e565b6001600160a01b0316815292840192600192909201918401612d18565b612d5560408a018a6132d5565b955093508581036040870152612d6c8186866129eb565b9b9a5050505050505050505050565b604081526000612d8f604083018587612bfb565b82810360208401528335612da28161344e565b6001600160a01b031681526020840135368590037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41018112612de357600080fd5b608060208301528401612df6818061331e565b60c06080850152612e0c61014085018284612bfb565b915050612e1c602083018361331e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80808685030160a0870152612e52848385612bfb565b9350612e61604086018661331e565b93509150808685030160c0870152612e7a848484612bfb565b9350612e89606086018661331e565b93509150808685030160e0870152612ea2848484612bfb565b9350612eb1608086018661331e565b935091508086850301610100870152612ecb848484612bfb565b9350612eda60a086018661331e565b9550925080868503016101208701525050612ef6828483612bfb565b92505050612f0760408601866132d5565b8383036040850152612f1a838284612a48565b92505050612f2b606086018661331e565b8383036060850152612f3e838284612bfb565b9998505050505050505050565b604081526001600160a01b0383511660408201526000602084015160806060840152805160c080850152612f83610180850182612c26565b905060208201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40808684030160e0870152612fbf8383612c26565b9250604084015191508086840301610100870152612fdd8383612c26565b9250606084015191508086840301610120870152612ffb8383612c26565b92506080840151915080868403016101408701526130198383612c26565b925060a08401519350808684030161016087015250506130398183612c26565b91505060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808584030160808601526130768383612b3c565b925060608701519150808584030160a0860152506130948282612c26565b925050508260208301529392505050565b600060208083526130b6848561331e565b6080838601526130ca60a086018284612bfb565b9150506130d9828601866132d5565b601f196040818886030181890152848386528686019050868460051b870101856000805b8781101561319457868a850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18a360301811261313d578283fd5b89016060813561314c8161344e565b6001600160a01b03168652818d01358d87015261316b8883018361331e565b9250818988015261317f8288018483612bfb565b978e019796505050928b0192506001016130fd565b5050506131a3838c018c61331e565b98509650838a82030160608b01526131bc818989612bfb565b97505050506131ce606089018961331e565b94509250808786030160808801525050612087838383612bfb565b6040805190810167ffffffffffffffff8111828210171561320c5761320c613438565b60405290565b6040516080810167ffffffffffffffff8111828210171561320c5761320c613438565b60405160c0810167ffffffffffffffff8111828210171561320c5761320c613438565b604051601f8201601f1916810167ffffffffffffffff8111828210171561328157613281613438565b604052919050565b600067ffffffffffffffff8211156132a3576132a3613438565b5060051b60200190565b600067ffffffffffffffff8211156132c7576132c7613438565b50601f01601f191660200190565b6000808335601e198436030181126132ec57600080fd5b830160208101925035905067ffffffffffffffff81111561330c57600080fd5b8060051b36038313156122bd57600080fd5b6000808335601e1984360301811261333557600080fd5b830160208101925035905067ffffffffffffffff81111561335557600080fd5b8036038313156122bd57600080fd5b60005b8381101561337f578181015183820152602001613367565b83811115610d085750506000910152565b600181811c908216806133a457607f821691505b6020821081141561236c57634e487b7160e01b600052602260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561340557634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610afb57600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610afb57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202b1c4c424311d30bda18bc49d6ff73aa43c5b46d792f2f498f157da213a3a78564736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}