{
  "address": "0x99AA93f7c882937849dDf31BBeCF8Bc1c7CF3192",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract DAO",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract VotingGovernancePrimitive",
          "name": "voting",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract Vault",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract Executor",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract Processes",
          "name": "processes",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract Permissions",
          "name": "permissions",
          "type": "address"
        }
      ],
      "name": "NewDAO",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "daos",
      "outputs": [
        {
          "internalType": "contract DAO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "contract DAO",
          "name": "dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract VotingGovernancePrimitive",
          "name": "voting",
          "type": "address"
        },
        {
          "internalType": "contract Vault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "contract Executor",
          "name": "executor",
          "type": "address"
        },
        {
          "internalType": "contract Processes",
          "name": "processes",
          "type": "address"
        },
        {
          "internalType": "contract Permissions",
          "name": "permissions",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe299fd95977519f2db28dd47685db481653710e704b50ec3570ea0bb2319f761",
  "receipt": {
    "to": null,
    "from": "0x94C34FB5025e054B24398220CBDaBE901bd8eE5e",
    "contractAddress": "0x99AA93f7c882937849dDf31BBeCF8Bc1c7CF3192",
    "transactionIndex": 27,
    "gasUsed": "319275",
    "logsBloom": "0x
    "blockHash": "0xc687a5567701542090f5480370c84d2f216301b2d0a9073e4558eef3324545ac",
    "transactionHash": "0xe299fd95977519f2db28dd47685db481653710e704b50ec3570ea0bb2319f761",
    "logs": [],
    "blockNumber": 9807908,
    "cumulativeGasUsed": "2644010",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "effbbd7e948d8c3899cd75bca837788f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract DAO\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract VotingGovernancePrimitive\",\"name\":\"voting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract Vault\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract Processes\",\"name\":\"processes\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract Permissions\",\"name\":\"permissions\",\"type\":\"address\"}],\"name\":\"NewDAO\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"daos\",\"outputs\":[{\"internalType\":\"contract DAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"contract DAO\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract VotingGovernancePrimitive\",\"name\":\"voting\",\"type\":\"address\"},{\"internalType\":\"contract Vault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"contract Processes\",\"name\":\"processes\",\"type\":\"address\"},{\"internalType\":\"contract Permissions\",\"name\":\"permissions\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Samuel Furter - Aragon Association - 2021\",\"kind\":\"dev\",\"methods\":{\"register(string,address,address,address,address,address,address,address,address)\":{\"details\":\"A name is unique within the Aragon DAO framework and can get stored here\",\"params\":{\"dao\":\"The address of the DAO contract\",\"name\":\"The name of the DAO\"}}},\"title\":\"Register your unique DAO name\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"register(string,address,address,address,address,address,address,address,address)\":{\"notice\":\"Registers a DAO by his name\"}},\"notice\":\"This contract provides the possiblity to register a DAO by a unique name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/registry/Registry.sol\":\"Registry\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x046a0ed44997d20c6fac6fb186cb2ce8957a1b25497f713bc18c79db21e57dee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xea40bf10119e88ed92ff8f1c72d01b0d2bfc810ad32c87d63ab6f316595d2c91\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd0d01e9036a03e50a71009749b9bfe7570a8f5b852ea409f794debfdd646dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xdfddefa47c1f11dde2c3b5533c76ccef27a526985c74d9c917deb699d5d46a56\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x94f08740b99a0997bc8363edb752b38354f730a38c54eb7bdd38a8a22ff34aae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xe237a2794a6588efdbf8cf998283ad188ac0e32d5f3e1d7d8d286fdac82863bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d874c66c21369dce8d3fe0b6c41316b0c289e45c0b4a77090c010ac2bb80e61\",\"license\":\"MIT\"},\"contracts/lib/acl/ACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\n// import \\\"../initializable/Initializable.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nlibrary ACLData {\\n    enum BulkOp { Grant, Revoke, Freeze }\\n\\n    struct BulkItem {\\n        BulkOp op;\\n        bytes4 role;\\n        address who;\\n    }\\n}\\n\\ncontract ACL is Initializable {\\n    bytes32 public constant ROOT_ROLE =\\n        this.grant.selector\\n        ^ this.revoke.selector\\n        ^ this.freeze.selector\\n        ^ this.bulk.selector\\n    ;\\n\\n    // \\\"Who\\\" constants\\n    address internal constant ANY_ADDR = address(type(uint160).max);\\n\\n    // \\\"Access\\\" flags\\n    address internal constant UNSET_ROLE = address(0);\\n    address internal constant FREEZE_FLAG = address(1); // Also used as \\\"who\\\"\\n    address internal constant ALLOW_FLAG = address(2);\\n        \\n    // hash(where, who, role) => Access flag(unset or allow) or ACLOracle (any other address denominates auth via ACLOracle)\\n    mapping (bytes32 => address) internal authPermissions;\\n    // hash(where, role) => true(role froze on the where), false(role is not frozen on the where)\\n    mapping (bytes32 => bool) internal freezePermissions;\\n\\n    event Granted(bytes32 indexed role, address indexed actor, address indexed who, address where, IACLOracle oracle);\\n    event Revoked(bytes32 indexed role, address indexed actor, address indexed who, address where);\\n    event Frozen(bytes32 indexed role, address indexed actor, address where);\\n\\n    modifier auth(address _where, bytes32 _role) {\\n        require(willPerform(_where, msg.sender, _role, msg.data), \\\"acl: auth\\\");\\n        _;\\n    }\\n\\n    function initACL(address _who) internal initializer {\\n        _initializeACL(address(this),  _who);\\n    }\\n    \\n    function grant(address _where, address _who, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _grant(_where, _who, _role);\\n    }\\n\\n    function grantWithOracle(address _where, address _who, bytes32 _role, IACLOracle _oracle) external auth(_where, ROOT_ROLE) {\\n        _grantWithOracle(_where, _who, _role, _oracle);\\n    }\\n\\n    function revoke(address _where, address _who, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _revoke(_where, _who, _role);\\n    }\\n\\n    function freeze(address _where, bytes32 _role) external auth(_where, ROOT_ROLE) {\\n        _freeze(_where, _role);\\n    }\\n\\n    function bulk(address _where, ACLData.BulkItem[] calldata items) external auth(_where, ROOT_ROLE) {\\n        for (uint256 i = 0; i < items.length; i++) {\\n            ACLData.BulkItem memory item = items[i];\\n\\n            if (item.op == ACLData.BulkOp.Grant) _grant(_where, item.who, item.role);\\n            else if (item.op == ACLData.BulkOp.Revoke) _revoke(_where, item.who, item.role);\\n            else if (item.op == ACLData.BulkOp.Freeze) _freeze(_where, item.role);\\n        }\\n    }\\n\\n    function willPerform(address _where, address _who, bytes32 _role, bytes memory _data) internal returns (bool) {\\n        return _checkRole(_where, _who, _role, _data) // check if _who is eligible for _role on _where\\n            || _checkRole(_where, ANY_ADDR, _role, _data) // check if anyone is eligible for _role on _where\\n            || _checkRole(ANY_ADDR, _who, _role, _data); // check if _who is eligible for _role on any contract.\\n    }\\n\\n    function isFrozen(address _where, bytes32 _role) public view returns (bool) {\\n        return freezePermissions[freezeHash(_where, _role)];\\n    }\\n\\n    function _initializeACL(address _where, address _who) internal {\\n        _grant(_where, _who, ROOT_ROLE);\\n    }\\n\\n    function _grant(address _where, address _who, bytes32 _role) internal {\\n        _grantWithOracle(_where, _who, _role, IACLOracle(ALLOW_FLAG));\\n    }\\n\\n    function _grantWithOracle(address _where, address _who, bytes32 _role, IACLOracle _oracle) internal {\\n        require(!isFrozen(_where, _role), \\\"acl: frozen\\\");\\n\\n        bytes32 permission = permissionHash(_where, _who, _role);\\n        require(authPermissions[permission] == UNSET_ROLE, \\\"acl: role already granted\\\");\\n        authPermissions[permission] = address(_oracle);\\n\\n        emit Granted(_role, msg.sender, _who, _where, _oracle);\\n    }\\n\\n    function _revoke(address _where, address _who, bytes32 _role) internal {\\n        require(!isFrozen(_where, _role), \\\"acl: frozen\\\");\\n\\n        bytes32 permission = permissionHash(_where, _who, _role);\\n        require(authPermissions[permission] != UNSET_ROLE, \\\"acl: role already revoked\\\");\\n        authPermissions[permission] = UNSET_ROLE;\\n\\n        emit Revoked(_role, msg.sender, _who, _where);\\n    }\\n\\n    function _freeze(address _where, bytes32 _role) internal {\\n        require(!isFrozen(_where,_role), \\\"acl: frozen\\\");\\n\\n        bytes32 permission = freezeHash(_where, _role);\\n        require(!freezePermissions[permission], \\\"acl: role already freeze\\\");\\n        freezePermissions[freezeHash(_where, _role)] = true;\\n\\n        emit Frozen(_role, msg.sender, _where);\\n    }\\n\\n    function _checkRole(address _where, address _who, bytes32 _role, bytes memory _data) internal returns (bool) {\\n        address accessFlagOrAclOracle = authPermissions[permissionHash(_where, _who, _role)];\\n        \\n        if (accessFlagOrAclOracle != UNSET_ROLE) return false;\\n        if (accessFlagOrAclOracle == ALLOW_FLAG) return true;\\n\\n        // Since it's not a flag, assume it's an ACLOracle and try-catch to skip failures\\n        try IACLOracle(accessFlagOrAclOracle).willPerform(_where, _who, _role, _data) returns (bool allowed) {\\n            if (allowed) return true;\\n        } catch { }\\n        \\n        return false;\\n    }\\n\\n    function permissionHash(address _where, address _who, bytes32 _role) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _role));\\n    }\\n\\n    function freezeHash(address _where, bytes32 _role) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"FREEZE\\\", _where, _role));\\n    }\\n}\\n\\n\",\"keccak256\":\"0x4e08946d30ce43eb7af0e6738d55c5eef5fc5c983ea1ed3a4f7a126eeac9943d\",\"license\":\"MIT\"},\"contracts/lib/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IACLOracle {\\n    function willPerform(address where, address who, bytes32 role, bytes calldata data) external returns (bool allowed);\\n}\\n\",\"keccak256\":\"0xa013fabd06c108de996ae2f44257b51cb8d1177d06ea17f4839a343e8d462929\",\"license\":\"MIT\"},\"contracts/lib/component/Component.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./IDAO.sol\\\";\\n\\nabstract contract Component is TimeHelpers {\\n    IDAO internal dao;\\n    \\n    function initialize(IDAO _dao) public virtual  {\\n        dao = _dao;\\n    }\\n\\n    modifier authP(bytes32 role)  {\\n        require(dao.hasPermission(address(this), msg.sender, role, msg.data), \\\"auth: check\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5a3c55a44d394b3192ddb53e65dae442eb9e7c37f765db39a344b1981b2e28e6\",\"license\":\"MIT\"},\"contracts/lib/component/IDAO.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDAO {\\n    // ACL handling permission\\n    function hasPermission(address _where, address _who, bytes32 _role, bytes memory data) external returns(bool);\\n    // DAO Level membershipm permission\\n    function checkPermission(string calldata role) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x59f7162646b9646470d32b53875dbb96eb7ef4fb0e4faaa7e704d28075547935\",\"license\":\"MIT\"},\"contracts/lib/component/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0x12a68391cacafa493240511161a9d0d6fd0ffabf331f100f325ba0e3f8621c79\",\"license\":\"MIT\"},\"contracts/lib/component/Uint256Helpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = type(uint64).max;\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x4b09aab45cb86e0c398441c00b92782879cb580f4613cf21c2259b1f480754ac\",\"license\":\"MIT\"},\"contracts/lib/component/UpgradableComponent.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./Component.sol\\\";\\n\\nabstract contract UpgradableComponent is Component, UUPSUpgradeable, Initializable {\\n\\n    bytes32 public constant UPGRADE_ROLE = keccak256(\\\"UPGRADE_ROLE\\\");\\n    \\n    function _authorizeUpgrade(address /*_newImplementation*/) internal virtual override authP(UPGRADE_ROLE) {\\n    \\n    }\\n\\n}\\n\",\"keccak256\":\"0xd80fabaac86b317d73acda4b6c5de1687f12dc94795f05196e65650d0af4f39d\",\"license\":\"MIT\"},\"contracts/lib/governance-primitives/GovernancePrimitive.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../src/permissions/Permissions.sol\\\";\\nimport \\\"../../src/processes/Processes.sol\\\";\\nimport \\\"../../src/executor/Executor.sol\\\";\\nimport \\\"../../src/DAO.sol\\\";\\nimport \\\"../component/Component.sol\\\";\\n\\n/// @title Abstract implementation of the governance primitive\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract can be used to implement concrete stoppable governance primitives and being fully compatible with the DAO framework and UI of Aragon\\n/// @dev You only have to define the specific custom logic for your needs in _start, _execute, and _stop\\nabstract contract GovernancePrimitive is Component {\\n\\n    bytes32 public constant CREATE_PRIMITIVE_START_ROLE = keccak256(\\\"CREATE_PRIMITIVE_START_ROLE\\\");\\n    bytes32 public constant PRIMITIVE_EXECUTE_ROLE = keccak256(\\\"PRIMITIVE_EXECUTE_ROLE\\\");\\n\\n    string internal constant ERROR_EXECUTION_STATE_WRONG = \\\"ERROR_EXECUTION_STATE_WRONG\\\";\\n    string internal constant ERROR_NOT_ALLOWED_TO_EXECUTE = \\\"ERROR_NOT_ALLOWED_TO_EXECUTE\\\";\\n    string internal constant ERROR_NOT_ALLOWED_TO_START = \\\"ERROR_NOT_ALLOWED_TO_START\\\";\\n    string internal constant ERROR_NO_EXECUTION = \\\"ERROR_NO_EXECUTION\\\";\\n    \\n    // The states a execution can have\\n    enum State {\\n        RUNNING, \\n        STOPPED,\\n        HALTED,\\n        EXECUTED\\n    }\\n\\n    struct Proposal {\\n        string processName; // The hash of the process that should get called\\n        Executor.Action[] actions; // The actions that should get executed in the end\\n        bytes metadata; // IPFS hash pointing to the metadata as description, title, image etc. \\n        bytes additionalArguments; // Optional additional arguments a process resp. governance primitive does need\\n    }\\n\\n    struct Execution { // A execution contains the process to execute, the proposal passed by the user, and the state of the execution.\\n        uint256 id;\\n        Processes.Process process;\\n        Proposal proposal;\\n        State state;\\n    }\\n\\n    uint256 private executionsCounter;\\n    mapping(uint256 => Execution) private executions;\\n\\n    event GovernancePrimitiveStarted(Execution indexed execution, uint256 indexed executionId);\\n    event GovernancePrimitiveExecuted(Execution indexed execution, uint256 indexed executionId);\\n\\n    modifier executionExist(uint256 _id) {\\n        require(_id < executionsCounter, ERROR_NO_EXECUTION);\\n        _;\\n    }\\n\\n    /// @notice If called the governance primitive starts a new execution.\\n    /// @dev The state of the container does get changed to RUNNING, the execution struct gets created, and the concrete implementation in _start called.\\n    /// @param process The process definition.\\n    /// @param proposal The proposal for execution submitted by the user.\\n    /// @return executionId The id of the newly created execution.\\n    function start(Processes.Process calldata process, Proposal calldata proposal) \\n        external \\n        authP(CREATE_PRIMITIVE_START_ROLE) \\n        returns (uint256 executionId) \\n    {\\n        require(\\n            dao.checkPermission(process.permissions.start),\\n            ERROR_NOT_ALLOWED_TO_START\\n        );\\n\\n        executionsCounter++;\\n\\n        // the reason behind this - https://matrix.to/#/!poXqlbVpQfXKWGseLY:gitter.im/$6IhWbfjcTqmLoqAVMopWFuIhlQwsoaIRxmsXhhmsaSs?via=gitter.im&via=matrix.org&via=ekpyron.org\\n        Execution storage execution = executions[executionsCounter];\\n        execution.id = executionsCounter;\\n        execution.process = process;\\n        execution.proposal = proposal;\\n        execution.state = State.RUNNING;\\n\\n        Execution memory _execution = execution;\\n\\n        _start(_execution); // \\\"Hook\\\" to add logic in start of a concrete implementation.\\n\\n        emit GovernancePrimitiveStarted(execution, executionId);\\n\\n        return executionsCounter;\\n    }\\n    \\n    /// @notice If called the proposed actions do get executed.\\n    /// @dev The state of the container does get changed to EXECUTED, the pre-execute method _execute does get called, and the actions executed.\\n    /// @param executionId The id of the execution struct.\\n    function execute(uint256 executionId) public executionExist(executionId) authP(PRIMITIVE_EXECUTE_ROLE) {\\n        Execution storage execution = _getExecution(executionId);\\n        \\n        require(execution.state == State.RUNNING, ERROR_EXECUTION_STATE_WRONG);\\n        require(\\n            dao.checkPermission(execution.process.permissions.execute),\\n            ERROR_NOT_ALLOWED_TO_EXECUTE\\n        );\\n\\n        execution.state = State.EXECUTED;\\n\\n        _execute(execution); // \\\"Hook\\\" to add logic in execute of a concrete implementation\\n\\n        // Executor(dao.executor.address).execute(execution.proposal.actions);\\n\\n        emit GovernancePrimitiveExecuted(execution, executionId);\\n    }\\n\\n    /// @dev Internal helper and abstraction to get a execution struct.\\n    /// @param executionId The id of the execution struct.\\n    function _getExecution(uint256 executionId) internal view returns (Execution storage execution) {\\n        return executions[executionId];\\n    }\\n\\n    /// @dev The concrete implementation of stop.\\n    /// @param execution The execution struct with all the informations needed.\\n    function _start(Execution memory execution) internal virtual;\\n\\n    /// @dev The concrete pre-execution call.\\n    /// @param execution The execution struct with all the informations needed.\\n    function _execute(Execution memory execution) internal virtual;\\n}\\n\",\"keccak256\":\"0xb23ccc03054f8693f8213bb7c3e218cf86389b8fd17179beaaae8c7ee9d3f428\",\"license\":\"MIT\"},\"contracts/lib/governance-primitives/voting/VotingGovernancePrimitive.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./../GovernancePrimitive.sol\\\";\\n\\n/// @title Abstract implementation of the voting governance primitive\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract can be used to implement concrete voting governance primitives and being fully compatible with the DAO framework and UI of Aragon\\n/// @dev You only have to define the specific custom logic of your needs in _vote, _start, and _execute\\nabstract contract VotingGovernancePrimitive is GovernancePrimitive {\\n    event VotedOnGovernancePrimitive(Execution indexed execution, bytes indexed data, uint256 executionId);\\n\\n    /// @notice If called a new vote does get added.\\n    /// @param executionId The identifier of the current execution\\n    /// @param data The arbitrary custom data used for the concrete implementation\\n    function vote(uint256 executionId, bytes calldata data) external executionExist(executionId) {\\n        Execution memory execution = _getExecution(executionId);\\n        \\n        require(execution.state == State.RUNNING, ERROR_EXECUTION_STATE_WRONG);\\n        require(\\n            dao.checkPermission(execution.process.permissions.vote),\\n            ERROR_EXECUTION_STATE_WRONG\\n        );\\n\\n        _vote(executionId, data);\\n\\n        emit VotedOnGovernancePrimitive(execution, data, executionId);\\n    }\\n\\n    /// @dev The concrete implementation of vote.\\n    /// @param data The arbitrary custom data used for the concrete implementation\\n    function _vote(uint256 executionId, bytes calldata data) internal virtual;\\n}\\n\\n\",\"keccak256\":\"0x50824b3566be0fbd0a5ff3740a859ca743e9252c6a885fec48d40d3872cd371a\",\"license\":\"MIT\"},\"contracts/lib/permissions/PermissionValidator.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title Abstract implementation of the permission validator\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract can be used to implement concrete permission validators and being fully compatible with the DAO framework and UI of Aragon\\n/// @dev You only have to define the specific custom logic for your needs in isValid\\nabstract contract PermissionValidator {\\n      /// @notice The method to initialize the validator.\\n      /// @dev Inherited contracts can override this and implement their own initialization logic.\\n      /// @param data The encoded data that each inherited contract decodes.\\n      function initialize(bytes memory data) external virtual {}\\n      /// @notice The method to validate a user permission.\\n      /// @dev The state of the container does get changed to RUNNING, the execution struct gets created, and the concrete implementation in _start called.\\n      /// @param caller The caler of this contract\\n      /// @return valid Returns a bool depending on the validity of the permission\\n      function isValid(address caller, bytes memory data) external view virtual returns(bool valid);\\n}\\n\",\"keccak256\":\"0xdd062a060ec7c36ff944fdaa2353b57429f0837fadcee4883d0ff2b1e82eb5b0\",\"license\":\"MIT\"},\"contracts/src/DAO.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../lib/governance-primitives/GovernancePrimitive.sol\\\";\\nimport \\\"./permissions/Permissions.sol\\\";\\nimport \\\"./processes/Processes.sol\\\";\\nimport \\\"./executor/Executor.sol\\\";\\nimport \\\"../lib/component/UpgradableComponent.sol\\\";\\nimport \\\"../lib/acl/ACL.sol\\\";\\nimport \\\"../lib/component/IDAO.sol\\\";\\n\\n/// @title The public interface of the Aragon DAO framework.\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract is the entry point to the Aragon DAO framework and provides our users a simple and use to use public interface.\\n/// @dev Public API of the Aragon DAO framework\\ncontract DAO is IDAO, Initializable, UUPSUpgradeable, ACL {\\n    \\n    bytes32 public constant DAO_CONFIG_ROLE = keccak256(\\\"DAO_CONFIG_ROLE\\\");\\n    bytes32 public constant UPGRADE_ROLE = keccak256(\\\"UPGRADE_ROLE\\\");\\n\\n    event NewProposal(GovernancePrimitive.Proposal indexed proposal, Processes.Process indexed process, address indexed submitter, uint256 executionId);\\n    event SetMetadata(bytes metadata);\\n\\n    bytes public metadata;\\n    Processes public processes;\\n    Permissions public permissions;\\n    Executor public executor;\\n\\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _metadata IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO\\n    /// @param _processes All the processes a DAO has\\n    /// @param _permissions All roles a DAO has\\n    /// @param _executor The executor to interact with any internal or third party contract\\n    function initialize(\\n        bytes calldata _metadata,\\n        Processes _processes,\\n        Permissions _permissions,\\n        Executor _executor,\\n        address _aclRoot\\n    ) public initializer {\\n        processes = _processes;\\n        permissions = _permissions;\\n        executor = _executor;\\n\\n        ACL.initACL(_aclRoot);\\n\\n        emit SetMetadata(_metadata);\\n    }\\n\\n    function _authorizeUpgrade(address /*_newImplementation*/) internal virtual override {\\n        require(willPerform(address(this), msg.sender, UPGRADE_ROLE, msg.data), \\\"auth:check\\\");\\n    }\\n\\n    modifier authP(bytes32 role)  {\\n        require(willPerform(address(this), msg.sender, role, msg.data), \\\"auth: check\\\");\\n        _;\\n    }\\n\\n    function hasPermission(address _where, address _who, bytes32 _role, bytes memory data) public override returns(bool) {\\n        return willPerform(_where, _who, _role, data);\\n    }\\n\\n    function checkPermission(string calldata _role) external view override returns(bool) {\\n        return permissions.checkPermission(_role);\\n    }\\n\\n    /// @notice If called a new governance process based on the submitted proposal does get kicked off\\n    /// @dev Validates the permissions, validates the actions passed, and start a new process execution based on the proposal.\\n    /// @param proposal The proposal submission of the user\\n    /// @return process The started process with his definition\\n    /// @return executionId The execution id\\n    function start(GovernancePrimitive.Proposal calldata proposal) external returns (Processes.Process memory process, uint256 executionId) {\\n        return processes.start(proposal);\\n    }\\n\\n    /// @notice If called a executable proposal does get executed.\\n    /// @dev Some governance primitives needed to be executed with a additional user based call.\\n    /// @param executionID The executionId\\n    /// @param governancePrimitive The primitive to call execute.\\n    function execute(uint256 executionID, GovernancePrimitive governancePrimitive) external {\\n        GovernancePrimitive(governancePrimitive).execute(executionID);\\n    }\\n\\n    /// @notice Update the DAO metadata\\n    /// @dev Sets a new IPFS hash\\n    /// @param _metadata The IPFS hash of the new metadata object\\n    function setMetadata(bytes calldata _metadata) external authP(DAO_CONFIG_ROLE) {\\n        emit SetMetadata(_metadata);   \\n    }\\n\\n    /// @notice Adds a new role to the permission management\\n    /// @dev Based on the name and the passed Permission struct does a new entry get added in Permissions\\n    /// @param role The name of the role as string\\n    /// @param permission The struct defining the logical operator and validators set for this role\\n    function addRole(string calldata role, Permissions.Permission calldata permission) external authP(DAO_CONFIG_ROLE) {\\n        permissions.setRole(role, permission);\\n    }\\n\\n    /// @notice Adds a new process to the DAO\\n    /// @dev Based on the name and the passed Process struct does a new entry get added in Processes\\n    /// @param name The name of the process as string\\n    /// @param process The struct defining the governance primitive, allowed actions, permissions, and metadata IPFS hash to describe the process \\n    function setProcess(string calldata name, Processes.Process calldata process) external authP(DAO_CONFIG_ROLE) {\\n        processes.setProcess(name, process);\\n    }\\n\\n    /// @notice Sets a new executor address in case it needs to get replaced at all\\n    /// @dev Updates the executor contract property\\n    /// @param _executor The address of the new executor\\n    function setExecutor(Executor _executor) external authP(DAO_CONFIG_ROLE) {\\n        executor = _executor;\\n    }\\n} \\n\",\"keccak256\":\"0x54781297f07049cfbd3a0a57f7282adbb803b7155d96f7ddd5046aa4a4b48a01\",\"license\":\"MIT\"},\"contracts/src/executor/Executor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../lib/component/UpgradableComponent.sol\\\";\\nimport \\\"../../lib/component/IDAO.sol\\\";\\n\\n/// @title Implementation of the Executor\\n/// @author Sarkawt Azad - Aragon Association - 2021\\n/// @notice This contract represent the execution layer.\\ncontract Executor is UpgradableComponent {\\n\\n  bytes32 public constant EXEC_ROLE = keccak256(\\\"EXEC_ROLE\\\");\\n\\n  event Executed(\\n    address indexed actor,\\n    Action[] indexed actions,\\n    bytes[] execResults\\n  );\\n\\n  string private constant ERROR_ACTION_CALL_FAILED = \\\"EXCECUTOR_ACTION_CALL_FAILED\\\";\\n\\n  struct Action {\\n    address to; // Address to call.\\n    uint256 value; // Value to be sent with the call. for example (ETH)\\n    bytes data;\\n  }\\n\\n  constructor() initializer {}\\n\\n  /// @dev Used for UUPS upgradability pattern\\n  /// @param _dao The DAO contract of the current DAO\\n  function initialize(IDAO _dao) public override initializer {\\n    Component.initialize(_dao);\\n  } \\n\\n  /// @notice If called, the list of provided actions will be executed.\\n  /// @dev It run a loop through the array of acctions and execute one by one.\\n  /// @dev If one acction fails, all will be reverted.\\n  /// @param actions The aray of actions\\n  function execute(Action[] memory actions) external authP(EXEC_ROLE) {\\n    bytes[] memory execResults = new bytes[](actions.length);\\n\\n    for (uint256 i = 0; i < actions.length; i++) {\\n      (bool success, bytes memory response) = actions[i].to.call{ value: actions[i].value }(actions[i].data);\\n\\n      require(success, ERROR_ACTION_CALL_FAILED);\\n\\n      execResults[i] = response;\\n    }\\n\\n    emit Executed(msg.sender, actions, execResults);\\n  }\\n}\\n\",\"keccak256\":\"0x943f443b1dfc3bdd961a50bb8a88e13f3488fe07a622244ec83779c382299e0c\",\"license\":\"MIT\"},\"contracts/src/permissions/Permissions.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../lib/permissions/PermissionValidator.sol\\\";\\nimport \\\"../../lib/component/IDAO.sol\\\";\\nimport \\\"../../lib/component/UpgradableComponent.sol\\\";\\n\\n\\n// TODO: Add update, remove etc. role\\n/// @title The permissions contract responsible to handle all the governance process related permissions.\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract is a central point of the Aragon DAO framework and handles all the permissions and stores the different groups a DAO can have.\\ncontract Permissions is UpgradableComponent {\\n    \\n    bytes32 public constant PERMISSIONS_SET_ROLE = keccak256(\\\"PERMISSIONS_SET_ROLE\\\");\\n    bytes32 public constant PERMISSIONS_ADD_VALIDATOR_ROLE = keccak256(\\\"PERMISSIONS_ADD_VALIDATOR_ROLE\\\");\\n\\n    event RoleSet(string indexed role, Permission indexed permission);\\n\\n    // The operator used to combine the validators accordingly to the the users wish\\n    enum Operator { \\n        OR, \\n        AND,\\n        NAND,\\n        NOR\\n    }\\n   \\n    // A permission consists out of a logical operator that defines how the set of validators should get interpreted\\n    struct Permission {\\n        Operator operator;\\n        PermissionValidator[] validators; // ERC20Validator, NFTValidator, e.t.c\\n        bytes[] data;\\n    }\\n\\n    // The different permissions to define depending on the type of governance primitive\\n    struct GovernancePrimitivePermissions {\\n        string start;\\n        string execute;\\n        string halt;\\n        string forward;\\n        string stop;\\n        string vote;\\n    }\\n\\n    mapping(string => Permission) public permissions;\\n\\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _dao The DAO contract of the current DAO\\n    function initialize(IDAO _dao) public override initializer {\\n        Component.initialize(_dao);\\n    }\\n\\n    /// @notice Adds a new role based on the permission validations passed.\\n    /// @dev Here you simple pass the role name and the permission struct with his logical operator and the validators set.\\n    /// @param role The name of the role as string\\n    /// @param permission The permission struct to define the permission validation rules\\n    function setRole(string calldata role, Permission calldata permission) external authP(PERMISSIONS_SET_ROLE) {\\n        permissions[role] = permission; // Group1 => [AND, ERC20Validator]\\n\\n        emit RoleSet(role, permission);\\n    }\\n\\n    // TODO: This method is not gas efficient\\n    /// @notice Checks the permissions of the caller.\\n    /// @dev Based on the stored permission struct does it go through all validators and checks the validity of the caller.\\n    /// @param role The name of the role as string\\n    /// @return valid The validity check result returned as bool\\n    function checkPermission(string calldata role) external view returns (bool valid) {\\n        PermissionValidator[] memory validators = permissions[role].validators;\\n        Operator operator = permissions[role].operator;\\n        bytes[] memory data = permissions[role].data;\\n\\n        uint256 validatorsLength = validators.length;\\n        uint8 succeeds = 0;\\n\\n        for (uint256 i = 0; i < validatorsLength; i++) {\\n            PermissionValidator validator = validators[i];\\n            if(PermissionValidator(validator).isValid(msg.sender, data[i])) {\\n                succeeds += 1;\\n            }\\n        }\\n\\n        if(operator == Operator.AND && succeeds == validatorsLength) {\\n            return true;\\n        }\\n\\n        if(operator == Operator.OR && succeeds >= 1) {\\n            return true;\\n        }\\n\\n        if(operator == Operator.NAND && succeeds < validatorsLength) {\\n            return true;\\n        }\\n\\n        if(operator == Operator.NOR && succeeds == 0) {\\n           return true;\\n        }\\n\\n        return false;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd29c3dd5e28174e002b3747bbf6c82564d439fa475c1c25702f630f02241e81e\",\"license\":\"MIT\"},\"contracts/src/processes/Processes.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../../lib/governance-primitives/GovernancePrimitive.sol\\\";\\nimport \\\"../permissions/Permissions.sol\\\";\\nimport \\\"../executor/Executor.sol\\\";\\nimport \\\"../../lib/component/IDAO.sol\\\";\\n\\n/// @title The processes contract defining the flow of every interaction with the DAO\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract is a central point of the Aragon DAO framework and handles all the processes and stores the different process types with his governance primitives a DAO can have.\\n/// @dev A list of process types are stored here pluss it validates if the passed actions in a proposal are valid.\\ncontract Processes is UpgradableComponent { \\n\\n    bytes32 public constant PROCESSES_START_ROLE = keccak256(\\\"PROCESSES_START_ROLE\\\");\\n    bytes32 public constant PROCESSES_SET_ROLE = keccak256(\\\"PROCESSES_SET_ROLE\\\");\\n\\n    event ProcessStarted(GovernancePrimitive.Proposal indexed proposal, uint256 indexed executionId);\\n    event ProcessSet(string indexed name, Process indexed process);\\n\\n    struct Process {\\n        GovernancePrimitive governancePrimitive; // The primitve to execute for example a simple yes/no voting.\\n        Permissions.GovernancePrimitivePermissions permissions; // A struct with all permission hashes for any possible governance primitive permission.\\n        AllowedActions[] allowedActions; // Allowed actions this process can call\\n        bytes metadata; // The IPFS hash that points to a JSON file that describes this specific governance process.\\n    }\\n\\n    struct AllowedActions {\\n        address to; // Allowed contract to call\\n        bytes4[] methods; // The method signatures of the allowed method calls\\n    }\\n    \\n    mapping(string => Process) public processes; // All existing governance processes in this DAO\\n\\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _dao The DAO contract of the current DAO\\n    function initialize(IDAO _dao) public override initializer {\\n        Component.initialize(_dao);\\n    }\\n\\n    /// @notice Starts the given process resp. primitive by the given proposal\\n    /// @dev Checks the passed actions, gets the governance primitive of this process, and starts it\\n    /// @param proposal The proposal for execution submitted by the user.\\n    /// @return process The Process struct stored\\n    /// @return executionId The id of the newly created execution.\\n    function start(GovernancePrimitive.Proposal calldata proposal) \\n        external \\n        authP(PROCESSES_START_ROLE) \\n        returns (Process memory process, uint256 executionId) \\n    {\\n        process = processes[proposal.processName];\\n        require(checkActions(proposal.actions, process.allowedActions), \\\"Not allowed action!\\\");\\n\\n        executionId = GovernancePrimitive(process.governancePrimitive).start(process, proposal);\\n        \\n        emit ProcessStarted(proposal, executionId);\\n\\n        return (process, executionId);\\n    }\\n\\n    /// @notice Adds a new process to the DAO\\n    /// @param name The name of the new process\\n    /// @param process The process struct defining the new DAO process\\n    function setProcess(string calldata name, Process calldata process) \\n        public \\n        authP(PROCESSES_SET_ROLE) \\n    {\\n        processes[name] = process;\\n\\n        emit ProcessSet(name, process);\\n    }\\n\\n    // TODO: Optimize this!\\n    /// @notice Checks if the passed actions are allowed to be executed with the selected process\\n    /// @dev Checks the passed actions, gets the governance primitive of this process, and starts it\\n    /// @param actions The proposal for execution submitted by the user.\\n    /// @param allowedActions The proposal for execution submitted by the user.\\n    /// @return valid Returns the validity bool value after validating the actions\\n    function checkActions(Executor.Action[] calldata actions, AllowedActions[] memory allowedActions) \\n        internal pure \\n        returns (bool valid) \\n    {\\n        uint256 actionsLength = actions.length;\\n        uint256 allowedActionsLength = allowedActions.length;\\n        bool allowed = false;\\n\\n        for (uint256 i = 0; i < actionsLength; i++) { // FOR EVERY PROPOSAL ACTION\\n            Executor.Action calldata action = actions[i];\\n            for (uint256 k = 0; k < allowedActionsLength; k++) { // FOR EVERY ALLOWED CONTRACT\\n                AllowedActions memory allowedAction = allowedActions[k];\\n                if (action.to == allowedAction.to) { // CONTRACT MATCHED\\n                    uint256 methodsLength = allowedAction.methods.length;\\n                    for (uint256 y = 0; y < methodsLength; y++) { // CHECK FOR EVERY ALLOWD METHOD OF A CONTRACT\\n                        if (bytes4(action.data[:4]) == allowedAction.methods[y]) { // METHOD FOUND STOP SEARCHING\\n                            allowed = true;\\n                            break;\\n                        } else { // METHOD NOT FOUND\\n                            allowed = false;\\n                        }\\n                    }\\n\\n                    if (allowed) {\\n                        break;\\n                    }\\n                }\\n            }\\n            \\n            if (!allowed) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xef4dfbf9a7358aaf2407c3a5d0ee2584547f88f40fe274f24bf3875c4b2462c8\",\"license\":\"MIT\"},\"contracts/src/registry/Registry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../DAO.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"../../lib/governance-primitives/voting/VotingGovernancePrimitive.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\nimport \\\"../vault/Vault.sol\\\";\\n\\n/// @title Register your unique DAO name\\n/// @author Samuel Furter - Aragon Association - 2021\\n/// @notice This contract provides the possiblity to register a DAO by a unique name.\\ncontract Registry {\\n    event NewDAO(\\n        string indexed name, \\n        address indexed creator,\\n        DAO indexed dao,\\n        address token,\\n        VotingGovernancePrimitive voting,\\n        Vault vault,\\n        Executor executor,\\n        Processes processes,\\n        Permissions permissions\\n    );\\n\\n    mapping(string => DAO) public daos;\\n\\n    /// @notice Registers a DAO by his name\\n    /// @dev A name is unique within the Aragon DAO framework and can get stored here\\n    /// @param name The name of the DAO\\n    /// @param dao The address of the DAO contract\\n    function register(\\n        string calldata name, \\n        address sender,\\n        DAO dao,\\n        address token,\\n        VotingGovernancePrimitive voting,\\n        Vault vault,\\n        Executor executor,\\n        Processes processes,\\n        Permissions permissions\\n        ) external {\\n        require(daos[name] == DAO(address(0)), \\\"Name in use\\\");\\n\\n        daos[name] = dao;\\n        \\n        emit NewDAO(\\n            name, \\n            sender,\\n            dao,\\n            token,\\n            voting,\\n            vault,\\n            executor,\\n            processes,\\n            permissions\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0949b1ac4be308bf759d29f17b49bcdd856ed3150dcf73749fc595ff33b0a70e\",\"license\":\"MIT\"},\"contracts/src/vault/Vault.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../../lib/component/IDAO.sol\\\";\\nimport \\\"../../lib/component/UpgradableComponent.sol\\\";\\n\\ncontract Vault is UpgradableComponent, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ETH = address(0);\\n\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \\\"VAULT_DEPOSIT_VALUE_ZERO\\\";\\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \\\"VAULT_TRANSFER_VALUE_ZERO\\\";\\n    string private constant ERROR_SEND_REVERTED = \\\"VAULT_SEND_REVERTED\\\";\\n    string private constant ERROR_VALUE_MISMATCH = \\\"VAULT_VALUE_MISMATCH\\\";\\n    \\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount, string reason);\\n    event VaultETHDeposit(address indexed sender, uint256 amount);\\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount, string reason);\\n    \\n    constructor() initializer {}\\n\\n    /// @dev Used for UUPS upgradability pattern\\n    /// @param _dao The DAO contract of the current DAO\\n    function initialize(IDAO _dao) public override initializer {\\n        Component.initialize(_dao);\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**  \\n    * @dev  Inside receive, its own eth deposit event gets used to somehow still allow\\n        send/transfer from caller contracts. Still, with this solution, access list\\n        feature is required to make it work. Using the VaultDeposit event, send/transfer\\n        won't even work with access list as adding 2 more argument adds 1000 more gas.\\n        NOTE: This mightn't work like this in the future as gas costs are about to change.\\n        use `send/transfer` from other contracts at your own risk.  \\n    */\\n    receive() external payable {\\n        emit VaultETHDeposit(msg.sender, msg.value);\\n    }\\n    \\n    // TODO: we might need to bring some checks for deposit so that it can't be called without proxy\\n    // this will make sure that functions don't get called on logic contract and end up there forever.\\n    /**\\n    *  @notice allows to deposit ether or token into this vault.\\n    *  @param _token token address(0x..00 in case of ETH)\\n    *  @param _value how much to deposit\\n    *  @param _description reason for the deposit\\n     */\\n    function deposit(address _token, uint256 _value, string calldata _description) external payable {\\n        _deposit(_token, _value, _description);\\n    }\\n    \\n    \\n    \\n    /**\\n    *  @notice allows to transfer ether or token from this vault.\\n    *  @dev nonReentrant is an extra added safety feature even though it might not be necessary. It actually comes in help\\n            when somehow malicious contract gets a TRANSFER_ROLE and tries to drain the contract balance.\\n    *  @param _token token address(0x..00 in case of ETH)\\n    *  @param _to who to transfer to.\\n    *  @param _value how much to transfer\\n    *  @param _description reason for the transfer\\n     */\\n    function transfer(address _token, address _to, uint256 _value, string calldata _description) external nonReentrant authP(TRANSFER_ROLE) {\\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool ok, ) = _to.call{value: _value}(\\\"\\\");\\n            require(ok, ERROR_SEND_REVERTED);\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _value);\\n        }\\n\\n        emit VaultTransfer(_token, _to, _value, _description);\\n    }\\n\\n    /**\\n    * @notice get a Vault balance \\n    * @param _token on which token to get a balance. (0x.000 in case of ETH)\\n    * @return balance of the vault on the token address\\n    */\\n    function balance(address _token) public view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(_token).balanceOf(address(this));\\n        }\\n    }\\n\\n    /// @dev internal function to handle deposit into the Vault.\\n    function _deposit(address _token, uint256 _value, string calldata _description) internal {\\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\\n        } else {\\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _value);\\n        }\\n\\n        emit VaultDeposit(_token, msg.sender, _value, _description);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xf9aaca61e47932b575d2e620d69fac2496e94ccf7ec68c36d7e8b9ccdbefa217\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506104d5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063bc7736aa1461003b578063e12ea8ba14610050575b600080fd5b61004e61004936600461029a565b6100ba565b005b61009161005e366004610391565b805160208183018101805160008252928201919093012091525473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff1660008b8b6040516100e4929190610460565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1614610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e616d6520696e20757365000000000000000000000000000000000000000000604482015260640160405180910390fd5b8660008b8b604051610188929190610460565b908152604051908190036020018120805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055888216918a16906101ec908d908d90610460565b6040805191829003822073ffffffffffffffffffffffffffffffffffffffff8b811684528a811660208501528981168484015288811660608501528781166080850152861660a0840152905190917fa92063028192a640657de2c3fa23ba7bc9ae51959669e5c34f5e666057405762919081900360c00190a450505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461029557600080fd5b919050565b6000806000806000806000806000806101208b8d0312156102ba57600080fd5b8a3567ffffffffffffffff808211156102d257600080fd5b818d0191508d601f8301126102e657600080fd5b8135818111156102f557600080fd5b8e602082850101111561030757600080fd5b60209283019c509a5061031d918d019050610271565b975061032b60408c01610271565b965061033960608c01610271565b955061034760808c01610271565b945061035560a08c01610271565b935061036360c08c01610271565b925061037160e08c01610271565b91506103806101008c01610271565b90509295989b9194979a5092959850565b6000602082840312156103a357600080fd5b813567ffffffffffffffff808211156103bb57600080fd5b818401915084601f8301126103cf57600080fd5b8135818111156103e1576103e1610470565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561042757610427610470565b8160405282815287602084870101111561044057600080fd5b826020860160208301376000928101602001929092525095945050505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122034f8fc38ec3c90a3e14e94f9944132a6cdf9613ab138b0cf6d53d05d9cfa3b2264736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063bc7736aa1461003b578063e12ea8ba14610050575b600080fd5b61004e61004936600461029a565b6100ba565b005b61009161005e366004610391565b805160208183018101805160008252928201919093012091525473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff1660008b8b6040516100e4929190610460565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1614610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e616d6520696e20757365000000000000000000000000000000000000000000604482015260640160405180910390fd5b8660008b8b604051610188929190610460565b908152604051908190036020018120805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055888216918a16906101ec908d908d90610460565b6040805191829003822073ffffffffffffffffffffffffffffffffffffffff8b811684528a811660208501528981168484015288811660608501528781166080850152861660a0840152905190917fa92063028192a640657de2c3fa23ba7bc9ae51959669e5c34f5e666057405762919081900360c00190a450505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461029557600080fd5b919050565b6000806000806000806000806000806101208b8d0312156102ba57600080fd5b8a3567ffffffffffffffff808211156102d257600080fd5b818d0191508d601f8301126102e657600080fd5b8135818111156102f557600080fd5b8e602082850101111561030757600080fd5b60209283019c509a5061031d918d019050610271565b975061032b60408c01610271565b965061033960608c01610271565b955061034760808c01610271565b945061035560a08c01610271565b935061036360c08c01610271565b925061037160e08c01610271565b91506103806101008c01610271565b90509295989b9194979a5092959850565b6000602082840312156103a357600080fd5b813567ffffffffffffffff808211156103bb57600080fd5b818401915084601f8301126103cf57600080fd5b8135818111156103e1576103e1610470565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561042757610427610470565b8160405282815287602084870101111561044057600080fd5b826020860160208301376000928101602001929092525095945050505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122034f8fc38ec3c90a3e14e94f9944132a6cdf9613ab138b0cf6d53d05d9cfa3b2264736f6c63430008060033",
  "devdoc": {
    "author": "Samuel Furter - Aragon Association - 2021",
    "kind": "dev",
    "methods": {
      "register(string,address,address,address,address,address,address,address,address)": {
        "details": "A name is unique within the Aragon DAO framework and can get stored here",
        "params": {
          "dao": "The address of the DAO contract",
          "name": "The name of the DAO"
        }
      }
    },
    "title": "Register your unique DAO name",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "register(string,address,address,address,address,address,address,address,address)": {
        "notice": "Registers a DAO by his name"
      }
    },
    "notice": "This contract provides the possiblity to register a DAO by a unique name.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11704,
        "contract": "contracts/src/registry/Registry.sol:Registry",
        "label": "daos",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_contract(DAO)9399)"
      }
    ],
    "types": {
      "t_contract(DAO)9399": {
        "encoding": "inplace",
        "label": "contract DAO",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_contract(DAO)9399)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract DAO)",
        "numberOfBytes": "32",
        "value": "t_contract(DAO)9399"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}